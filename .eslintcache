[{"D:\\PROJECTS\\frontgold\\src\\index.js":"1","D:\\PROJECTS\\frontgold\\src\\App.js":"2","D:\\PROJECTS\\frontgold\\src\\components\\layout\\MyNavbar.js":"3","D:\\PROJECTS\\frontgold\\src\\components\\layout\\SideBarData.js":"4","D:\\PROJECTS\\frontgold\\src\\components\\pages\\Pages.js":"5","D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\Dashboard.js":"6","D:\\PROJECTS\\frontgold\\src\\components\\layout\\SideBarMenu.js":"7","D:\\PROJECTS\\frontgold\\src\\components\\pages\\items\\AddItem.js":"8","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\ISR\\ISR.js":"9","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\ISR\\ISRForm.js":"10","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\ISR\\ISRPrintComponent.js":"11","D:\\PROJECTS\\frontgold\\src\\api\\index.js":"12","D:\\PROJECTS\\frontgold\\src\\reducers\\RootReducer.js":"13","D:\\PROJECTS\\frontgold\\src\\reducers\\ItemReducer.js":"14","D:\\PROJECTS\\frontgold\\src\\reducers\\DetailsReducer.js":"15","D:\\PROJECTS\\frontgold\\src\\actions\\DetailsActions.js":"16","D:\\PROJECTS\\frontgold\\src\\actions\\ItemActions.js":"17","D:\\PROJECTS\\frontgold\\src\\reducers\\BarcodeScanReducer.js":"18","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\BarcodeScan.js\\BarcodeScan.js":"19","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\PO\\PO.js":"20","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\BarcodeScan.js\\BarcodeScanPanel.js":"21","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\BarcodeScan.js\\BarcodeScanResult.js":"22","D:\\PROJECTS\\frontgold\\src\\actions\\BarcodeScanActions.js":"23","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\PO\\POPrintComponent.js":"24","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\PO\\POTable.js":"25","D:\\PROJECTS\\frontgold\\src\\components\\auth\\SignIn.js":"26","D:\\PROJECTS\\frontgold\\src\\reducers\\AuthReducer.js":"27","D:\\PROJECTS\\frontgold\\src\\actions\\AuthActions.js":"28","D:\\PROJECTS\\frontgold\\src\\components\\pages\\home\\Home.js":"29","D:\\PROJECTS\\frontgold\\src\\components\\pages\\home\\PageUnavailable.js":"30","D:\\PROJECTS\\frontgold\\src\\components\\pages\\items\\ViewItems.js":"31","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\PO\\ViewBarcodes.js":"32","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\ISR\\ViewDetails.js":"33","D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashCard.js":"34","D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashPie.js":"35","D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashboardTodayTable.js":"36","D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashboardStatusMonitoring.js":"37","D:\\PROJECTS\\frontgold\\src\\reducers\\StatusTableReducer.js":"38","D:\\PROJECTS\\frontgold\\src\\reducers\\StatusListReducer.js":"39","D:\\PROJECTS\\frontgold\\src\\reducers\\RouteTableReducer.js":"40","D:\\PROJECTS\\frontgold\\src\\actions\\StatusActions.js":"41","D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashRoutes.js":"42","D:\\PROJECTS\\frontgold\\src\\components\\pages\\users\\RouteInfo.js":"43","D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashShipment.js":"44","D:\\PROJECTS\\frontgold\\src\\reducers\\ShipmentReducer.js":"45"},{"size":1656,"mtime":1611676024289,"results":"46","hashOfConfig":"47"},{"size":1853,"mtime":1611756950541,"results":"48","hashOfConfig":"47"},{"size":3646,"mtime":1611931420596,"results":"49","hashOfConfig":"47"},{"size":3156,"mtime":1610609959039,"results":"50","hashOfConfig":"47"},{"size":4037,"mtime":1611691255209,"results":"51","hashOfConfig":"47"},{"size":7733,"mtime":1611943509149,"results":"52","hashOfConfig":"47"},{"size":1893,"mtime":1611676193169,"results":"53","hashOfConfig":"47"},{"size":14378,"mtime":1611937503947,"results":"54","hashOfConfig":"47"},{"size":2683,"mtime":1611686522104,"results":"55","hashOfConfig":"47"},{"size":8343,"mtime":1612540229166,"results":"56","hashOfConfig":"47"},{"size":5295,"mtime":1610603191118,"results":"57","hashOfConfig":"47"},{"size":4587,"mtime":1611758793871,"results":"58","hashOfConfig":"47"},{"size":638,"mtime":1611759141421,"results":"59","hashOfConfig":"47"},{"size":259,"mtime":1609223499265,"results":"60","hashOfConfig":"47"},{"size":273,"mtime":1609608821128,"results":"61","hashOfConfig":"47"},{"size":604,"mtime":1609889429429,"results":"62","hashOfConfig":"47"},{"size":530,"mtime":1611403910296,"results":"63","hashOfConfig":"47"},{"size":486,"mtime":1611674429591,"results":"64","hashOfConfig":"47"},{"size":1554,"mtime":1611750975462,"results":"65","hashOfConfig":"47"},{"size":3857,"mtime":1611685043711,"results":"66","hashOfConfig":"47"},{"size":5448,"mtime":1612365988864,"results":"67","hashOfConfig":"47"},{"size":1642,"mtime":1611752661559,"results":"68","hashOfConfig":"47"},{"size":980,"mtime":1611674420362,"results":"69","hashOfConfig":"47"},{"size":4750,"mtime":1611680489938,"results":"70","hashOfConfig":"47"},{"size":9080,"mtime":1612541090151,"results":"71","hashOfConfig":"47"},{"size":3959,"mtime":1612366639459,"results":"72","hashOfConfig":"47"},{"size":479,"mtime":1610289807696,"results":"73","hashOfConfig":"47"},{"size":886,"mtime":1610639967552,"results":"74","hashOfConfig":"47"},{"size":156,"mtime":1610040170685,"results":"75","hashOfConfig":"47"},{"size":188,"mtime":1610040379997,"results":"76","hashOfConfig":"47"},{"size":13735,"mtime":1611756909391,"results":"77","hashOfConfig":"47"},{"size":5211,"mtime":1611755800510,"results":"78","hashOfConfig":"47"},{"size":16258,"mtime":1612548523124,"results":"79","hashOfConfig":"47"},{"size":393,"mtime":1611177347058,"results":"80","hashOfConfig":"47"},{"size":3059,"mtime":1612617397464,"results":"81","hashOfConfig":"47"},{"size":2474,"mtime":1611943540502,"results":"82","hashOfConfig":"47"},{"size":14781,"mtime":1611943891771,"results":"83","hashOfConfig":"47"},{"size":183,"mtime":1611403823526,"results":"84","hashOfConfig":"47"},{"size":180,"mtime":1611403855905,"results":"85","hashOfConfig":"47"},{"size":180,"mtime":1611403854495,"results":"86","hashOfConfig":"47"},{"size":1066,"mtime":1611759039640,"results":"87","hashOfConfig":"47"},{"size":1542,"mtime":1611690954389,"results":"88","hashOfConfig":"47"},{"size":1679,"mtime":1611758279974,"results":"89","hashOfConfig":"47"},{"size":1885,"mtime":1612540375974,"results":"90","hashOfConfig":"47"},{"size":189,"mtime":1611759013810,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},"17d0ngb",{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"95"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"95"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"95"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"95"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"95"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"95"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"95"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"95"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"95"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"95"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"95"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"95"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"95"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"95"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"95"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"95"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"95"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"95"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"95"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"95"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"95"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"95"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"95"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"95"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"95"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"95"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"95"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"95"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"95"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"95"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"95"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"95"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"95"},"D:\\PROJECTS\\frontgold\\src\\index.js",["217","218"],"import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\"\n\nimport { Provider } from \"react-redux\"\nimport { createStore, applyMiddleware, compose } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport reducers from \"./reducers/RootReducer\"\n\nimport {\n  transitions,\n  positions,\n  types,\n  Provider as AlertProvider,\n} from \"react-alert\"\n// import AlertTemplate from 'react-alert-template-basic'\n\nconst options = {\n  // you can also just use 'bottom center'\n  position: \"top right\",\n  timeout: 3000,\n  // offset: '70px',\n  // you can also just use 'scale'\n\n  transition: transitions.SCALE,\n  containerStyle: {\n    zIndex: 80000,\n  },\n}\n\nconst AlertTemplate = ({ style, options, message, close }) => (\n  <div style={style}>\n    {message}\n    {/* <button onClick={close}>X</button> */}\n  </div>\n)\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)))\n\n// store.subscribe(() => {\n//   // const cachedCreds = JSON.parse(window.localStorage.getItem(\"credentials\"))\n//   // console.log(cachedCreds.token)\n//   console.log(store.getState())\n// })\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AlertProvider template={AlertTemplate} {...options}>\n        <App />\n      </AlertProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n",["219","220"],"D:\\PROJECTS\\frontgold\\src\\App.js",["221","222","223","224","225"],"import { useEffect, useState } from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { BrowserRouter } from \"react-router-dom\"\nimport { logout } from \"./actions/AuthActions\"\nimport SignIn from \"./components/auth/SignIn\"\nimport MyNavbar from \"./components/layout/MyNavbar\"\nimport Pages from \"./components/pages/Pages\"\nimport { useDispatch, useSelector } from \"react-redux\"\n\nfunction App() {\n  const [sidebar, setSidebar] = useState(false)\n  const [isAdmin, setIsAdmin] = useState(false)\n  const [loggedIn, setLoggedIn] = useState(false)\n  const [cached, setCached] = useState(null)\n  const dispatch = useDispatch()\n  const [isMain, setIsMain] = useState(false)\n\n  document.onkeydown = function (evt) {\n    evt = evt || window.event\n    var isEscape = false\n    if (\"key\" in evt) {\n      isEscape = evt.key === \"Escape\" || evt.key === \"Esc\"\n    } else {\n      isEscape = evt.keyCode === 27\n    }\n    if (isEscape) {\n      setSidebar(false)\n    }\n  }\n  const auth = useSelector((state) => state.auth)\n\n  const handleLogout = () => {\n    dispatch(logout())\n\n    setSidebar(false)\n  }\n\n  useEffect(() => {\n    const cacheCreds = JSON.parse(window.localStorage.getItem(\"credentials\"))\n    setCached(cacheCreds)\n  }, [auth])\n\n  if (cached) {\n    return (\n      <BrowserRouter>\n        <div className=\"nav\">\n          {\" \"}\n          {/*onMouseLeave={() => { setSidebar(false)}}>*/}\n          <MyNavbar\n            sidebar={sidebar}\n            setSidebar={setSidebar}\n            isAdmin={cached.is_Admin}\n            setIsAdmin={setIsAdmin}\n            handleLogout={handleLogout}\n            isMain={isMain}\n          />\n        </div>\n        <Pages sidebar={sidebar} setSidebar={setSidebar} isMain={isMain} />\n      </BrowserRouter>\n    )\n  } else {\n    //signin\n    return <SignIn setCached={setCached} cached={cached} />\n  }\n}\n\nexport default App\n","D:\\PROJECTS\\frontgold\\src\\components\\layout\\MyNavbar.js",["226","227"],"import React from \"react\"\r\nimport { Link, withRouter } from \"react-router-dom\"\r\nimport * as FaIcons from \"react-icons/fa\"\r\nimport { SideBarDataAdmin, SideBarDataStaff } from \"./SideBarData\"\r\nimport { IconContext } from \"react-icons\"\r\nimport SideBarMenu from \"./SideBarMenu\"\r\nimport * as RiIcons from \"react-icons/ri\"\r\nimport { GiConsoleController } from \"react-icons/gi\"\r\n\r\nfunction MyNavbar({\r\n  sidebar,\r\n  setSidebar,\r\n  isAdmin,\r\n  setIsAdmin,\r\n  handleLogout,\r\n  history,\r\n  isMain,\r\n}) {\r\n  const showSidebar = () => setSidebar(!sidebar)\r\n\r\n  const handleClick = () => {\r\n    handleLogout()\r\n    window.localStorage.clear()\r\n    history.push(\"/\")\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <IconContext.Provider value={{ color: \"white\" }}>\r\n        <div className=\"navbar\">\r\n          <Link to=\"#\" className=\"menu-bars\">\r\n            <FaIcons.FaBars onClick={showSidebar} />\r\n          </Link>\r\n\r\n          {isAdmin ? (\r\n            <div\r\n              onClick={() => {\r\n                setIsAdmin(!isAdmin)\r\n              }}\r\n            >\r\n              <FaIcons.FaUserTie style={{ fontSize: \"30px\" }} />\r\n              <span style={{ color: \"white\", marginRight: \"10px\" }}>Admin</span>\r\n            </div>\r\n          ) : (\r\n            <div\r\n              onClick={() => {\r\n                setIsAdmin(!isAdmin)\r\n              }}\r\n            >\r\n              <FaIcons.FaUserInjured style={{ fontSize: \"30px\" }} />\r\n              <span style={{ color: \"white\", marginRight: \"10px\" }}>Staff</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <nav className={sidebar ? \"nav-menu active\" : \"nav-menu\"}>\r\n          <ul className=\"nav-menu-items\">\r\n            {/* <li className=\"navbar-toggle\">\r\n                        <Link to=\"#\" className=\"menu-bars\">\r\n                            <AiIcons.AiOutlineClose onClick={showSidebar}/>\r\n                        </Link>\r\n                    </li> */}\r\n            {isAdmin\r\n              ? SideBarDataAdmin.map((item, index) => {\r\n                  if (isMain) {\r\n                    if (item.title !== \"Orders\") {\r\n                      return (\r\n                        <SideBarMenu\r\n                          item={item}\r\n                          key={index}\r\n                          isMain={isMain}\r\n                          showSidebar={showSidebar}\r\n                        />\r\n                      )\r\n                    }\r\n                  } else {\r\n                    return (\r\n                      <SideBarMenu\r\n                        item={item}\r\n                        key={index}\r\n                        isMain={isMain}\r\n                        showSidebar={showSidebar}\r\n                      />\r\n                    )\r\n                  }\r\n                })\r\n              : SideBarDataStaff.map((item, index) => {\r\n                  return (\r\n                    <SideBarMenu\r\n                      item={item}\r\n                      key={index}\r\n                      showSidebar={showSidebar}\r\n                    />\r\n                  )\r\n                })}\r\n            {/* {SideBarDataAdmin.map((item, index) => {\r\n                        return (\r\n                           <SideBarMenu item={item} key={index}/>\r\n                        )\r\n                    })} */}\r\n\r\n            <li\r\n              style={{ display: \"block\", width: \"100%\" }}\r\n              className=\"nav-text\"\r\n              onClick={handleClick}\r\n            >\r\n              <RiIcons.RiLogoutBoxLine />\r\n              <span>LOGOUT</span>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </IconContext.Provider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default withRouter(MyNavbar)\r\n","D:\\PROJECTS\\frontgold\\src\\components\\layout\\SideBarData.js",["228"],"import React from 'react'\r\nimport * as FaIcons from 'react-icons/fa'\r\nimport * as AiIcons from 'react-icons/ai'\r\nimport * as IoIcons from 'react-icons/io'\r\nimport * as RiIcons from 'react-icons/ri';\r\nimport * as GiIcons from 'react-icons/gi';\r\nimport * as VscIcons from 'react-icons/vsc';\r\n\r\n\r\nexport const SideBarDataAdmin = [\r\n    {\r\n        title: 'Dashboard',\r\n        path: '/',\r\n        icon: <RiIcons.RiDashboardLine />,\r\n        class_name: 'nav-text',\r\n    },\r\n    {\r\n        title: 'Items',\r\n        path: '#',\r\n        icon: <GiIcons.GiGloves />,\r\n        class_name: 'nav-text',\r\n        iconClosed: <RiIcons.RiArrowDownSFill />,\r\n        iconOpened: <RiIcons.RiArrowUpSFill />,\r\n        subNav: [\r\n            {\r\n                title: 'Add Item',\r\n                path: '/items/add',\r\n                icon: <FaIcons.FaPlus />\r\n            },\r\n            {\r\n                title: 'View Items',\r\n                path: '/items/view',\r\n                icon: <IoIcons.IoIosPaper />\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: 'Orders',\r\n        path: '#',\r\n        icon: <VscIcons.VscGear />,\r\n        class_name: 'nav-text',\r\n        iconClosed: <RiIcons.RiArrowDownSFill />,\r\n        iconOpened: <RiIcons.RiArrowUpSFill />,\r\n        subNav: [\r\n            {\r\n                title: 'Create PO',\r\n                path: '/process/isr',\r\n                icon: <FaIcons.FaPrint />\r\n            },\r\n           \r\n            {\r\n                title: 'View PO',\r\n                path: '/po/view',\r\n                icon: <FaIcons.FaPrint />\r\n            },\r\n            \r\n        ]\r\n    },\r\n    {\r\n        title: 'Barcodes',\r\n        path: '#',\r\n        icon: <FaIcons.FaBarcode />,\r\n        class_name: 'nav-text',\r\n        iconClosed: <RiIcons.RiArrowDownSFill />,\r\n        iconOpened: <RiIcons.RiArrowUpSFill />,\r\n        subNav: [\r\n            {\r\n                title: 'Generate Barcodes',\r\n                path: '/process/po',\r\n                icon: <FaIcons.FaPrint />\r\n            },\r\n            {\r\n                title: 'View Barcodes',\r\n                path: '/barcodes/view',\r\n                icon: <FaIcons.FaPrint />\r\n            },\r\n            {\r\n                title: 'Barcode Scan',\r\n                path: '/process/scan',\r\n                icon: <FaIcons.FaBarcode />,\r\n                class_name: 'nav-text',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        title: 'Admin Page',\r\n        path: '/adminpage',\r\n        icon: <FaIcons.FaUsers />,\r\n        class_name: 'nav-text',\r\n    },\r\n]\r\n\r\nexport const SideBarDataStaff = [\r\n    // {\r\n    //     title: 'Home',\r\n    //     path: '/',\r\n    //     icon: <AiIcons.AiFillHome />,\r\n    //     class_name: 'nav-text',\r\n    // },\r\n    {\r\n        title: 'Barcode Scan',\r\n        path: '/process/scan',\r\n        icon: <FaIcons.FaBarcode />,\r\n        class_name: 'nav-text',\r\n    },\r\n    {\r\n        title: 'Routing Info',\r\n        path: '/info',\r\n        icon: <FaIcons.FaBook />,\r\n        class_name: 'nav-text',\r\n    },\r\n    // {\r\n    //     title: 'Logs',\r\n    //     path: '/logs',\r\n    //     icon: <FaIcons.FaBook />,\r\n    //     class_name: 'nav-text',\r\n    // },\r\n]","D:\\PROJECTS\\frontgold\\src\\components\\pages\\Pages.js",["229","230","231"],"import React, { useEffect, useState } from \"react\"\r\nimport { Route, Switch, withRouter } from \"react-router-dom\"\r\nimport Dashboard from \"./dashboard/Dashboard\"\r\nimport AddItem from \"./items/AddItem\"\r\nimport PageUnavailable from \"./home/PageUnavailable\"\r\nimport Home from \"./home/Home\"\r\nimport BarcodeScan from \"./process/BarcodeScan.js/BarcodeScan\"\r\nimport ISR from \"./process/ISR/ISR\"\r\nimport PO from \"./process/PO/PO\"\r\nimport SignIn from \"../auth/SignIn\"\r\nimport ViewItems from \"./items/ViewItems\"\r\nimport ViewBarcodes from \"./process/PO/ViewBarcodes\"\r\nimport ViewDetails from \"./process/ISR/ViewDetails\"\r\nimport DashRoutes from \"./dashboard/DashRoutes\"\r\nimport RouteInfo from \"./users/RouteInfo\"\r\n\r\nfunction Pages({ sidebar, history, setSidebar, isMain }) {\r\n  const [cachedCreds, setCachedCreds] = useState(null)\r\n\r\n  history.listen((location, action) => {\r\n    // console.log(history)\r\n    const cacheCreds = JSON.parse(window.localStorage.getItem(\"credentials\"))\r\n    setCachedCreds(cacheCreds)\r\n  })\r\n\r\n  useEffect(() => {\r\n    const cacheCreds = JSON.parse(window.localStorage.getItem(\"credentials\"))\r\n    setCachedCreds(cacheCreds)\r\n  }, [])\r\n\r\n  return (\r\n    <div className={sidebar ? \"main-container-active\" : \"main-container\"}>\r\n      {cachedCreds ? (\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            component={\r\n              cachedCreds.is_Admin\r\n                ? Dashboard\r\n                : () => {\r\n                    window.location.href =\r\n                      window.location.protocol +\r\n                      \"//\" +\r\n                      window.location.host +\r\n                      \"/process/scan\"\r\n                  }\r\n            }\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/items/add\"\r\n            component={\r\n              cachedCreds.is_Admin\r\n                ? () => <AddItem isMain={isMain} />\r\n                : PageUnavailable\r\n            }\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path=\"/process/isr\"\r\n            component={cachedCreds.is_Admin ? ISR : PageUnavailable}\r\n          />\r\n          {/* <Route exact path=\"/signin\" component={cachedCreds ? PageUnavailable :  SignIn } /> */}\r\n          <Route\r\n            exact\r\n            path=\"/process/scan\"\r\n            component={cachedCreds.is_Admin ? BarcodeScan : BarcodeScan}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path=\"/process/po\"\r\n            component={\r\n              cachedCreds.is_Admin\r\n                ? () => <PO setSidebar={setSidebar} sidebar={sidebar} />\r\n                : PageUnavailable\r\n            }\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path=\"/items/view\"\r\n            component={cachedCreds.is_Admin ? ViewItems : PageUnavailable}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/po/view\"\r\n            component={cachedCreds.is_Admin ? ViewDetails : PageUnavailable}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path=\"/barcodes/view\"\r\n            component={\r\n              cachedCreds.is_Admin\r\n                ? () => <ViewBarcodes isMain={isMain} />\r\n                : PageUnavailable\r\n            }\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path=\"/info\"\r\n            component={cachedCreds.is_Admin ? RouteInfo : RouteInfo}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path=\"/adminpage\"\r\n            component={\r\n              cachedCreds.is_Admin\r\n                ? () => {\r\n                    window.location.href =\r\n                      window.location.protocol +\r\n                      \"//\" +\r\n                      window.location.hostname +\r\n                      \":8000\" +\r\n                      \"/admin\"\r\n                    return <h4>Session Expired</h4>\r\n                  }\r\n                : PageUnavailable\r\n            }\r\n          />\r\n        </Switch>\r\n      ) : (\r\n        <p>Loading..</p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(Pages)\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\Dashboard.js",["232","233","234","235","236"],"import React, { useState, useEffect } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { fetchDetails } from \"../../../actions/DetailsActions\"\r\nimport DashCard from \"./DashCard\"\r\nimport DashPie from \"./DashPie\"\r\nimport * as GiIcons from \"react-icons/gi\"\r\nimport * as FaIcons from \"react-icons/fa\"\r\nimport DashboardTodayTable from \"./DashboardTodayTable\"\r\nimport DashboardStatusMonitoring from \"./DashboardStatusMonitoring\"\r\nimport moment from \"moment\"\r\nimport {\r\n  getRouteTable,\r\n  getStatusList,\r\n  getStatusTable,\r\n} from \"../../../actions/StatusActions\"\r\nimport DashRoutes from \"./DashRoutes\"\r\nimport DashShipment from \"./DashShipment\"\r\n\r\nfunction Dashboard() {\r\n  const dispatch = useDispatch()\r\n\r\n  const statusTable = useSelector((state) => state.statusTable)\r\n  const details = useSelector((state) => state.details)\r\n  // const statusList = useSelector((state) => state.statusList)\r\n\r\n  const [tableFlag, setTableFlag] = useState(false)\r\n  const [chartData, setChartData] = useState([])\r\n  const [monthDetails, setMonthDetails] = useState([])\r\n  const [monthDetailsStatus, setMonthDetailsStatus] = useState({\r\n    onProcess: 0,\r\n    completed: 0,\r\n  })\r\n  const [customerValues, setCustomerValues] = useState({\r\n    customers: [],\r\n    values: [],\r\n  })\r\n  const [totalTOTAL, setTotalTOTAL] = useState({\r\n    codes: [],\r\n    totals: [],\r\n  })\r\n  const [perProcessToday, setPerProcessToday] = useState({\r\n    KNITTING: 0,\r\n    CUTTING: 0,\r\n    RECEIPTS: 0,\r\n    STEAMING: 0,\r\n    EXAMINING: 0,\r\n    SEWING: 0,\r\n    STEAMING_1: 0,\r\n    EXAMINING_1: 0,\r\n    TAGGING: 0,\r\n    METALDETECT: 0,\r\n    BOXING: 0,\r\n  })\r\n\r\n  useEffect(() => {\r\n    dispatch(getStatusList())\r\n    dispatch(getStatusTable())\r\n    dispatch(fetchDetails())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log(details)\r\n    if (details && details.length) {\r\n      let filteredDetails = details.filter(\r\n        (d) =>\r\n          moment(d.create_on).format(\"MMM\") === moment(new Date()).format(\"MMM\")\r\n      )\r\n      let ordersCompleted = filteredDetails.filter((fd) => !fd.active)\r\n      let ordersOnProcess = filteredDetails.filter((fd) => fd.active)\r\n\r\n      setMonthDetailsStatus({\r\n        onProcess: ordersOnProcess.length,\r\n        completed: ordersCompleted.length,\r\n      })\r\n      setMonthDetails(filteredDetails)\r\n    }\r\n  }, [details])\r\n\r\n  useEffect(() => {\r\n    console.log(monthDetailsStatus)\r\n  }, [monthDetailsStatus])\r\n\r\n  useEffect(() => {\r\n    console.log(monthDetails)\r\n    if (monthDetails.length) {\r\n      let uCustList = []\r\n      monthDetails.forEach((md) => {\r\n        if (!uCustList.includes(md.detail_customer)) {\r\n          uCustList.push(md.detail_customer)\r\n        }\r\n      })\r\n      let uCustListVals = []\r\n      uCustList.forEach((ucl) => {\r\n        let val = 0\r\n        monthDetails.forEach((md) => {\r\n          if (ucl === md.detail_customer) {\r\n            val++\r\n          }\r\n        })\r\n        uCustListVals.push(val)\r\n      })\r\n      console.log(uCustList)\r\n      console.log(uCustListVals)\r\n      setCustomerValues({\r\n        customers: uCustList,\r\n        values: uCustListVals,\r\n      })\r\n    }\r\n  }, [monthDetails])\r\n\r\n  useEffect(() => {\r\n    let tempList = []\r\n    Object.keys(perProcessToday).forEach((ppt) => {\r\n      tempList.push(perProcessToday[ppt])\r\n    })\r\n    setChartData(tempList)\r\n  }, [perProcessToday])\r\n\r\n  useEffect(() => {\r\n    todayQuantityPerProcess()\r\n    console.log(statusTable)\r\n  }, [statusTable])\r\n\r\n  useEffect(() => {\r\n    console.log(chartData)\r\n  }, [chartData])\r\n\r\n  const todayQuantityPerProcess = () => {\r\n    if (statusTable && statusTable.length) {\r\n      const dateNow = new Date(Date.now())\r\n      const dateFmt = moment(dateNow).format(\"YYYY-MM-DD\")\r\n\r\n      const filterTodayData = statusTable.filter((s) => s.date === dateFmt)\r\n\r\n      let tempPPT = {\r\n        KNITTING: 0,\r\n        CUTTING: 0,\r\n        // RECEIPTS: 0,\r\n        STEAMING: 0,\r\n        EXAMINING: 0,\r\n        SEWING: 0,\r\n        // STEAMING_1: 0,\r\n        // EXAMINING_1: 0,\r\n        TAGGING: 0,\r\n        METALDETECT: 0,\r\n        BOXING: 0,\r\n      }\r\n      filterTodayData.forEach((ftd) => {\r\n        Object.keys(tempPPT).forEach((ppt) => {\r\n          if (ppt.toString() === ftd.process.toString().toUpperCase()) {\r\n            tempPPT[ppt] += ftd.qty\r\n          }\r\n        })\r\n      })\r\n\r\n      // let codeList = filterTodayData.map((ftd) => ftd.code)\r\n      // let uniqueCodeList = [...new Set(codeList)]\r\n      // let uniqueCodeListTotal = new Array(uniqueCodeList.length).fill(0)\r\n      // uniqueCodeList.forEach((ucl, index) => {\r\n      //   filterTodayData.forEach((ftd) => {\r\n      //     if (ucl === ftd.code) {\r\n      //       uniqueCodeListTotal[index] = ftd.total\r\n      //     }\r\n      //   })\r\n      // })\r\n\r\n      // setTotalTOTAL({\r\n      //   codes: uniqueCodeList,\r\n      //   totals: uniqueCodeListTotal,\r\n      // })\r\n\r\n      // let customerList = filterTodayData.map((ftd) => ftd.customer)\r\n      // let uniquecustomerList = [...new Set(customerList)]\r\n      // let uniquecustomerListQTYAdded = new Array(\r\n      //   uniquecustomerList.length\r\n      // ).fill(0)\r\n      // uniquecustomerList.forEach((ucl, index) => {\r\n      //   filterTodayData.forEach((ftd) => {\r\n      //     if (ucl === ftd.customer) {\r\n      //       uniquecustomerListQTYAdded[index] += ftd.qty\r\n      //     }\r\n      //   })\r\n      // })\r\n      // setCustomerValues({\r\n      //   customers: uniquecustomerList,\r\n      //   values: uniquecustomerListQTYAdded,\r\n      // })\r\n\r\n      setPerProcessToday(tempPPT)\r\n      setTableFlag(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"dash-wrapper\">\r\n      <div className=\"dash-container\">\r\n        <h5>DASHBOARD</h5>\r\n        <h4>Volume For This Month</h4>\r\n        <Row>\r\n          <Col lg={3}>\r\n            <div className=\"dash-card-wrapper\">\r\n              <DashCard\r\n                stylclass={\"dash-card-1\"}\r\n                icon={<FaIcons.FaCalendarCheck fontSize={45} />}\r\n                val={monthDetails.length}\r\n                caption={\"ORDERS CREATED\"}\r\n              />\r\n              <DashCard\r\n                stylclass={\"dash-card-2\"}\r\n                icon={<FaIcons.FaExclamationCircle fontSize={45} />}\r\n                val={monthDetailsStatus.completed}\r\n                caption={\"ORDERS COMPLETED\"}\r\n              />\r\n              <DashCard\r\n                stylclass={\"dash-card-3\"}\r\n                icon={<GiIcons.GiKnapsack fontSize={45} />}\r\n                val={monthDetailsStatus.onProcess}\r\n                caption={\"ORDERS ON PROCESS\"}\r\n              />\r\n            </div>\r\n          </Col>\r\n          <Col lg={9}>\r\n            <div className=\"dash-pie-wrapper\">\r\n              <DashPie customerValues={customerValues} />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <hr />\r\n        <br />\r\n        <h4>Process Output Today</h4>\r\n        <br />\r\n        <div>\r\n          {tableFlag ? (\r\n            <DashboardTodayTable\r\n              perProcessToday={perProcessToday}\r\n              chartData={chartData}\r\n            />\r\n          ) : (\r\n            <p>Loading..</p>\r\n          )}\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <hr />\r\n        <br />\r\n        <div className=\"dash-status-monitoring-div\">\r\n          <DashboardStatusMonitoring statusTable={statusTable} />\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <hr />\r\n        <br />\r\n        <br />\r\n        <DashRoutes />\r\n        <br />\r\n        <br />\r\n        <hr />\r\n        <br />\r\n        <br />\r\n        <DashShipment />\r\n        <div style={{ paddingBottom: \"500px\" }}></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","D:\\PROJECTS\\frontgold\\src\\components\\layout\\SideBarMenu.js",["237","238"],"import React, { useState, useEffect } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nfunction SideBarMenu({ item, showSidebar, isMain }) {\r\n  const [subnav, setSubnav] = useState(false)\r\n  const showSubnav = () => setSubnav(!subnav)\r\n\r\n  return (\r\n    <li>\r\n      <Link\r\n        to={item.path}\r\n        className={item.class_name}\r\n        onClick={item.subNav && showSubnav}\r\n      >\r\n        <div>\r\n          {item.icon}\r\n          <span>{item.title}</span>\r\n        </div>\r\n        <div>\r\n          {item.subNav && subnav\r\n            ? item.iconOpened\r\n            : item.subNav\r\n            ? item.iconClosed\r\n            : null}\r\n        </div>\r\n      </Link>\r\n      {subnav &&\r\n        item.subNav.map((item, index) => {\r\n          if (isMain) {\r\n            if (item.title !== \"Generate Barcodes\") {\r\n              return (\r\n                <Link\r\n                  to={item.path}\r\n                  key={index}\r\n                  className=\"sub-links\"\r\n                  onClick={\r\n                    item.path === \"/process/scan\" || item.path === \"/process/po\"\r\n                      ? () => showSidebar()\r\n                      : null\r\n                  }\r\n                >\r\n                  {item.icon}\r\n                  <span>{item.title}</span>\r\n                </Link>\r\n              )\r\n            }\r\n          } else {\r\n            return (\r\n              <Link\r\n                to={item.path}\r\n                key={index}\r\n                className=\"sub-links\"\r\n                onClick={\r\n                  item.path === \"/process/scan\" || item.path === \"/process/po\"\r\n                    ? () => showSidebar()\r\n                    : null\r\n                }\r\n              >\r\n                {item.icon}\r\n                <span>{item.title}</span>\r\n              </Link>\r\n            )\r\n          }\r\n        })}\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default SideBarMenu\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\items\\AddItem.js",["239"],"import React, { useEffect, useState } from \"react\"\r\nimport { Form, Container, Row, Col, Button, Image } from \"react-bootstrap\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { addItem } from \"../../../actions/ItemActions\"\r\nimport Gears from \"../../../assets/img/gir2.png\"\r\nimport * as FaIcons from \"react-icons/fa\"\r\nimport * as BiIcons from \"react-icons/bi\"\r\n\r\nimport { useAlert } from \"react-alert\"\r\n\r\nfunction AddItem({ isMain }) {\r\n  const dispatch = useDispatch()\r\n  const alert = useAlert()\r\n\r\n  const [ItemClass, setItemClass] = useState({\r\n    process: [],\r\n    customer: \"\",\r\n    style: \"\",\r\n  })\r\n\r\n  useEffect(() => {\r\n    console.log(\"itemClass\", ItemClass)\r\n  }, [ItemClass])\r\n\r\n  const handleFormChange = (e) => {\r\n    setItemClass({\r\n      ...ItemClass,\r\n      [e.target.id]: e.target.value.toUpperCase(),\r\n    })\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()\r\n    let checkboxes = document.querySelectorAll(\"input[type=checkbox]:checked\")\r\n    if (checkboxes.length) {\r\n      const res = await dispatch(addItem(ItemClass))\r\n      console.log(res)\r\n      if (res) {\r\n        alert.show(\r\n          <div className=\"alert-suc\">\r\n            <FaIcons.FaCheck /> The Item has been added!\r\n          </div>\r\n        )\r\n        document.getElementById(\"form-add-item\").reset()\r\n      } else {\r\n        alert.show(\r\n          <div className=\"alert-err\">\r\n            <BiIcons.BiError /> Unable to add the Item!\r\n          </div>\r\n        )\r\n      }\r\n      document.getElementById(\"form-add-item\").reset()\r\n    } else {\r\n      alert.show(\r\n        <div className=\"alert-err\">\r\n          <BiIcons.BiError /> No Selected Process!\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  const handleClear = () => {\r\n    document.getElementById(\"form-add-item\").reset()\r\n  }\r\n  const handleChange = (e) => {\r\n    let processList = []\r\n    let checkboxes = document.querySelectorAll(\"input[type=checkbox]:checked\")\r\n    for (let i = 0; i < checkboxes.length; i++) {\r\n      processList.push(checkboxes[i].value)\r\n    }\r\n    console.log(\"processarray\", processList)\r\n    setItemClass({\r\n      ...ItemClass,\r\n      process: processList,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"add-item-wrapper\">\r\n      <div className=\"add-item-container\">\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h5 className=\"form-title\">ADD ITEM</h5>\r\n        </div>\r\n\r\n        <div className=\"add-item-primary\">\r\n          <Form onSubmit={handleSubmit} id=\"form-add-item\">\r\n            <Row>\r\n              <Col lg={1}></Col>\r\n              <Col lg={5}>\r\n                <Form.Group controlId=\"customer\">\r\n                  <Form.Label>Customer:</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    type=\"text\"\r\n                    placeholder=\"Customer\"\r\n                    className=\"form-caps\"\r\n                    onChange={handleFormChange}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"style\">\r\n                  <Form.Label>Style:</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    type=\"text\"\r\n                    placeholder=\"Style\"\r\n                    className=\"form-caps\"\r\n                    onChange={handleFormChange}\r\n                  />\r\n                </Form.Group>\r\n                <br />\r\n                <Image\r\n                  src={Gears}\r\n                  style={{\r\n                    width: \"200px\",\r\n                    marginLeft: \"90px\",\r\n                    height: \"170px\",\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col lg={1}></Col>\r\n              <Col lg={5}>\r\n                {ItemClass.customer.toUpperCase() === \"TOTES\" ? (\r\n                  isMain ? (\r\n                    <Form.Group>\r\n                      <Form.Label>Process:</Form.Label>\r\n                      <Form.Check\r\n                        label=\"B1 Receipts\"\r\n                        value=\"receipts\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Steaming\"\r\n                        value=\"steaming\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Examining\"\r\n                        value=\"examining\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Steaming 1\"\r\n                        value=\"steaming_1\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n\r\n                      <Form.Check\r\n                        label=\"Examining 1\"\r\n                        value=\"examining_1\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Tagging\"\r\n                        value=\"tagging\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Metal Detection\"\r\n                        value=\"metaldetect\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Boxing\"\r\n                        value=\"boxing\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                    </Form.Group>\r\n                  ) : (\r\n                    <Form.Group>\r\n                      <Form.Label>Process:</Form.Label>\r\n\r\n                      <Form.Check\r\n                        label=\"Knitting\"\r\n                        value=\"knitting\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"ISR 1\"\r\n                        value=\"isr_1\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"B1 Receipts\"\r\n                        value=\"receipts\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Steaming\"\r\n                        value=\"steaming\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Examining\"\r\n                        value=\"examining\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"ISR 2\"\r\n                        value=\"isr_2\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Sewing\"\r\n                        value=\"sewing\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"ISR 3\"\r\n                        value=\"isr_3\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Steaming 1\"\r\n                        value=\"steaming_1\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n\r\n                      <Form.Check\r\n                        label=\"Examining 1\"\r\n                        value=\"examining_1\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Tagging\"\r\n                        value=\"tagging\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Metal Detection\"\r\n                        value=\"metaldetect\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Boxing\"\r\n                        value=\"boxing\"\r\n                        onChange={handleChange}\r\n                        onClick={handleChange}\r\n                      />\r\n                    </Form.Group>\r\n                  )\r\n                ) : isMain ? (\r\n                  <Form.Group>\r\n                    <Form.Label>Process:</Form.Label>\r\n                    <Form.Check\r\n                      label=\"B1 Receipts\"\r\n                      value=\"receipts\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"Steaming\"\r\n                      value=\"steaming\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"Tagging\"\r\n                      value=\"tagging\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"Examining\"\r\n                      value=\"examining\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n\r\n                    <Form.Check\r\n                      label=\"Metal Detection\"\r\n                      value=\"metaldetect\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"Boxing\"\r\n                      value=\"boxing\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                  </Form.Group>\r\n                ) : (\r\n                  <Form.Group>\r\n                    <Form.Label>Process:</Form.Label>\r\n                    <Form.Check\r\n                      label=\"Knitting\"\r\n                      value=\"knitting\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"Cutting\"\r\n                      value=\"cutting\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"ISR 1\"\r\n                      value=\"isr_1\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"Sewing\"\r\n                      value=\"sewing\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"ISR 2\"\r\n                      value=\"isr_2\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n\r\n                    <Form.Check\r\n                      label=\"B1 Receipts\"\r\n                      value=\"receipts\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"Steaming\"\r\n                      value=\"steaming\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"Tagging\"\r\n                      value=\"tagging\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"Examining\"\r\n                      value=\"examining\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n\r\n                    <Form.Check\r\n                      label=\"Metal Detection\"\r\n                      value=\"metaldetect\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                    <Form.Check\r\n                      label=\"Boxing\"\r\n                      value=\"boxing\"\r\n                      onChange={handleChange}\r\n                      onClick={handleChange}\r\n                    />\r\n                  </Form.Group>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <br />\r\n            <br />\r\n            <Row>\r\n              <Col lg={1}></Col>\r\n              <Col lg={10}>\r\n                <Form.Group>\r\n                  <Button\r\n                    variant=\"info\"\r\n                    type=\"submit\"\r\n                    className=\"form-btn-dark\"\r\n                    size=\"sm\"\r\n                    block\r\n                  >\r\n                    Add\r\n                  </Button>\r\n\r\n                  <Button\r\n                    variant=\"info\"\r\n                    className=\"form-btn-dark\"\r\n                    block\r\n                    size=\"sm\"\r\n                    onClick={handleClear}\r\n                  >\r\n                    Clear\r\n                  </Button>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col lg={1}></Col>\r\n            </Row>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddItem\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\ISR\\ISR.js",["240","241","242"],"import React, { useEffect, useState } from \"react\"\r\nimport { Col, Row, Button } from \"react-bootstrap\"\r\nimport ISRForm from \"./ISRForm\"\r\nimport ISRPrintComponent from \"./ISRPrintComponent\"\r\nimport html2canvas from \"html2canvas\"\r\nimport { jsPDF } from \"jspdf\"\r\n\r\nfunction ISR() {\r\n  const [ISRItem, setISRItem] = useState({\r\n    detail_customer: \"\",\r\n    po_number: \"\",\r\n    total_sack: \"\",\r\n    description: \"\",\r\n    color: \"\",\r\n    size: \"\",\r\n    total: \"\",\r\n    qty_sack: \"\",\r\n    ship_date: \"\",\r\n    detail_style: \"\",\r\n  })\r\n\r\n  useEffect(() => {\r\n    let totalSack = document.getElementById(\"total_sack\")\r\n    let poNum = document.getElementById(\"po_number\")\r\n    let description = document.getElementById(\"description\")\r\n    let color = document.getElementById(\"color\")\r\n    let total = document.getElementById(\"total\")\r\n    let qty_sack = document.getElementById(\"qty_sack\")\r\n    let size = document.getElementById(\"size\")\r\n    let ship_date = document.getElementById(\"ship_date\")\r\n\r\n    totalSack.value = \"\"\r\n    poNum.value = \"\"\r\n    description.value = \"\"\r\n    color.value = \"\"\r\n    total.value = \"\"\r\n    qty_sack.value = \"\"\r\n    ship_date.value = \"\"\r\n    size.value = \"\"\r\n\r\n    setISRItem({\r\n      ...ISRItem,\r\n      po_number: \"\",\r\n      total_sack: \"\",\r\n      description: \"\",\r\n      size: \"\",\r\n      color: \"\",\r\n      total: \"\",\r\n      qty_sack: \"\",\r\n      ship_date: \"\",\r\n    })\r\n  }, [ISRItem.detail_customer])\r\n\r\n  const handlePrint = () => {\r\n    const input = document.getElementById(\"printForm\")\r\n\r\n    html2canvas(input).then((canvas) => {\r\n      const imgData = canvas.toDataURL(\"image/png\")\r\n      const pdf = new jsPDF(\"p\", \"mm\", \"a4\")\r\n      let width = pdf.internal.pageSize.getWidth()\r\n      let height = pdf.internal.pageSize.getHeight()\r\n      pdf.addImage(imgData, \"JPEG\", 0, 0, width, height)\r\n      pdf.save(\"download.pdf\")\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"isr-wrapper\">\r\n      <div className=\"isr-container\">\r\n        <Row style={{ margin: \"0 auto\" }}>\r\n          {/* <Col lg={1}></Col> */}\r\n          <Col lg={6} md={11} sm={11}>\r\n            <div className=\"isr-container-form\">\r\n              <div style={{ marginBottom: \"15px\" }}>\r\n                <h5 className=\"form-title\">CREATE ORDER</h5>\r\n              </div>\r\n              <ISRForm ISRItem={ISRItem} setISRItem={setISRItem} />\r\n            </div>\r\n          </Col>\r\n          <Col lg={6} md={11} sm={11}>\r\n            <div className=\"isr-container-print\" id=\"printForm\">\r\n              <ISRPrintComponent ISRItem={ISRItem} />\r\n            </div>\r\n          </Col>\r\n          {/* <Col lg={1}></Col> */}\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ISR\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\ISR\\ISRForm.js",["243","244"],"import React, { useEffect, useState } from \"react\"\r\nimport { Form, Row, Col, Button } from \"react-bootstrap\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { addDetails } from \"../../../../actions/DetailsActions\"\r\nimport { getItems } from \"../../../../actions/ItemActions\"\r\nimport * as FaIcons from \"react-icons/fa\"\r\nimport * as BiIcons from \"react-icons/bi\"\r\nimport { useAlert } from \"react-alert\"\r\n\r\nfunction ISRForm({ ISRItem, setISRItem }) {\r\n  const dispatch = useDispatch()\r\n  const alert = useAlert()\r\n  const item = useSelector((state) => state.item)\r\n  const [detailStyle, setdetailStyle] = useState(null)\r\n\r\n  useEffect(() => {\r\n    if (item) {\r\n      if (item.length) {\r\n        let customerList = []\r\n        for (let i = 0; i !== item.length; i++) {\r\n          customerList.push(item[i].customer)\r\n        }\r\n\r\n        let UniqueCustomerList = [...new Set(customerList)]\r\n\r\n        setdetailStyle({\r\n          ...detailStyle,\r\n          customerList: UniqueCustomerList,\r\n        })\r\n      }\r\n    }\r\n  }, [item])\r\n\r\n  useEffect(() => {\r\n    dispatch(getItems())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setdetailStyle({\r\n      customerList: [],\r\n      styleDict: [],\r\n    })\r\n  }, [])\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()\r\n\r\n    const res = await dispatch(addDetails(ISRItem))\r\n    if (res) {\r\n      alert.show(\r\n        <div className=\"alert-suc\">\r\n          <FaIcons.FaCheck /> The PO has been created!\r\n        </div>\r\n      )\r\n    } else {\r\n      alert.show(\r\n        <div className=\"alert-err\">\r\n          <BiIcons.BiError /> Unable to create PO!\r\n        </div>\r\n      )\r\n    }\r\n    document.getElementById(\"form-isr\").reset()\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    let customer = document.getElementById(\"detail_customer\")\r\n    let style = document.getElementById(\"detail_style\")\r\n    let poNum = document.getElementById(\"po_number\")\r\n    let total = document.getElementById(\"total\")\r\n    let qtySack = document.getElementById(\"qty_sack\")\r\n    let totalSack = document.getElementById(\"total_sack\")\r\n\r\n    if (customer.value !== \"NONE\") {\r\n      let filteredItem = item.filter((i) => i.customer === customer.value)\r\n      let styleDict = []\r\n\r\n      for (let i = 0; i !== filteredItem.length; i++) {\r\n        styleDict.push({\r\n          id: filteredItem[i].id,\r\n          style: filteredItem[i].style,\r\n        })\r\n        setdetailStyle({\r\n          ...detailStyle,\r\n          styleDict: styleDict,\r\n        })\r\n      }\r\n    } else {\r\n      setdetailStyle({\r\n        ...detailStyle,\r\n        styleDict: [],\r\n      })\r\n    }\r\n\r\n    if (style.value !== \"\" && poNum.value !== \"\" && customer.value !== \"NONE\") {\r\n      if (total.value !== \"\" && qtySack.value !== \"\") {\r\n        if (total.value % qtySack.value !== 0) {\r\n          totalSack.value = Math.trunc(total.value / qtySack.value) + 1\r\n        } else {\r\n          totalSack.value = total.value / qtySack.value\r\n        }\r\n      }\r\n      setISRItem({\r\n        ...ISRItem,\r\n        [e.target.id]: e.target.value.toUpperCase(),\r\n        detail_style: style.value,\r\n        total_sack: totalSack.value,\r\n      })\r\n    } else if (customer.value === \"NONE\") {\r\n      setISRItem({\r\n        ...ISRItem,\r\n        detail_customer: \"\",\r\n      })\r\n    } else {\r\n      setISRItem({\r\n        ...ISRItem,\r\n        [e.target.id]: e.target.value.toUpperCase(),\r\n        detail_style: style.value,\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={handleSubmit} id=\"form-isr\">\r\n        <Form.Group as={Row} controlId=\"detail_customer\">\r\n          <Col sm=\"4\">\r\n            <Form.Label>Customer:</Form.Label>\r\n          </Col>\r\n          <Col sm=\"8\">\r\n            <Form.Control\r\n              required\r\n              as=\"select\"\r\n              onChange={handleChange}\r\n              className=\"form-caps\"\r\n            >\r\n              <option key={0} value=\"NONE\">\r\n                NONE\r\n              </option>\r\n              {detailStyle\r\n                ? detailStyle.customerList.map((customer, index) => {\r\n                    return <option key={index}>{customer}</option>\r\n                  })\r\n                : null}\r\n            </Form.Control>\r\n          </Col>\r\n        </Form.Group>\r\n        <Form.Group as={Row} controlId=\"detail_style\">\r\n          <Col sm=\"4\">\r\n            <Form.Label>Style:</Form.Label>\r\n          </Col>\r\n          <Col sm=\"8\">\r\n            <Form.Control\r\n              required\r\n              as=\"select\"\r\n              onChange={handleChange}\r\n              placeholder=\"Choose Customer\"\r\n              className=\"form-caps\"\r\n            >\r\n              {detailStyle\r\n                ? detailStyle.styleDict.map((style, index) => {\r\n                    return (\r\n                      <option key={index} value={style.style}>\r\n                        {style.style}\r\n                      </option>\r\n                    )\r\n                  })\r\n                : null}\r\n            </Form.Control>\r\n          </Col>\r\n        </Form.Group>\r\n        <Form.Group as={Row} controlId=\"po_number\">\r\n          <Col sm=\"4\">\r\n            <Form.Label>PO Number:</Form.Label>\r\n          </Col>\r\n          <Col sm=\"8\">\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n              className=\"form-caps\"\r\n              // maxLength=\"10\"\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n        <Form.Group as={Row} controlId=\"description\">\r\n          <Col sm=\"4\">\r\n            <Form.Label>Description:</Form.Label>\r\n          </Col>\r\n          <Col sm=\"8\">\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n              className=\"form-caps\"\r\n              // maxLength=\"40\"\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n        <Form.Group as={Row} controlId=\"color\">\r\n          <Col sm=\"4\">\r\n            <Form.Label>Color:</Form.Label>\r\n          </Col>\r\n          <Col sm=\"8\">\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n              className=\"form-caps\"\r\n              // maxLength=\"50\"\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n        <Form.Group as={Row} controlId=\"size\">\r\n          <Col sm=\"4\">\r\n            <Form.Label>Size:</Form.Label>\r\n          </Col>\r\n          <Col sm=\"8\">\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n              className=\"form-caps\"\r\n              // maxLength=\"10\"\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n        <Form.Group as={Row} controlId=\"total\">\r\n          <Col sm=\"4\">\r\n            <Form.Label>Total:</Form.Label>\r\n          </Col>\r\n          <Col sm=\"8\">\r\n            <Form.Control\r\n              required\r\n              type=\"number\"\r\n              onChange={handleChange}\r\n              className=\"form-caps\"\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n        <Form.Group as={Row} controlId=\"qty_sack\">\r\n          <Col sm=\"4\">\r\n            <Form.Label>Quantity / Sack:</Form.Label>\r\n          </Col>\r\n          <Col sm=\"8\">\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n              className=\"form-caps\"\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n        <Form.Group as={Row} controlId=\"total_sack\">\r\n          <Col sm=\"4\">\r\n            <Form.Label>Total Sack:</Form.Label>\r\n          </Col>\r\n          <Col sm=\"8\">\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              onChange={handleChange}\r\n              className=\"form-caps\"\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n        <Form.Group as={Row} controlId=\"ship_date\">\r\n          <Col sm=\"4\">\r\n            <Form.Label>Ship Date:</Form.Label>\r\n          </Col>\r\n          <Col sm=\"8\">\r\n            <Form.Control\r\n              required\r\n              type=\"date\"\r\n              onChange={handleChange}\r\n              className=\"form-caps\"\r\n            />\r\n          </Col>\r\n        </Form.Group>\r\n        <div>\r\n          <Button type=\"submit\" className=\"form-btn-dark\" block>\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ISRForm\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\ISR\\ISRPrintComponent.js",["245","246","247","248"],"import React, {useEffect, useState} from 'react'\r\nimport { Col, Container, Table, Row } from 'react-bootstrap';\r\nimport { useBarcode } from '@createnextapp/react-barcode';\r\nimport { useDispatch,useSelector } from 'react-redux'\r\nimport { getItems } from '../../../../actions/ItemActions';\r\n\r\n\r\nfunction ISRPrintComponent({ ISRItem }) {\r\n    \r\n    const dispatch = useDispatch()\r\n    const item = useSelector(state => state.item)\r\n    const [routeList, setRouteList] = useState([])\r\n    \r\n    // const [bar, setBar] = useState('null')\r\n\r\n    // let {inputRef}  = useBarcode({\r\n    //     value: bar ? bar:'null',\r\n    //     options: {\r\n    //         background: '#ffffff',\r\n    //         width: 1,\r\n    //         height: 40,\r\n    //         fontSize: 13\r\n    //     }\r\n    // });\r\n\r\n    // useEffect(() => {\r\n    //     setBar(ISRItem.barcode)\r\n    // }, [ISRItem.barcode,ISRItem.detail_customer])\r\n    useEffect(() => {\r\n        dispatch(getItems())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        console.log(item)\r\n    }, [item])\r\n\r\n    useEffect(() => {\r\n        console.log(routeList)\r\n    }, [routeList])\r\n\r\n    useEffect(() => {\r\n        let styleField = document.getElementById('style-field');\r\n        let style = document.getElementById('detail_style');\r\n        if (style.selectedIndex!==-1) {\r\n         styleField.textContent= style.options[style.selectedIndex].innerHTML   \r\n        }\r\n        if (styleField.textContent !== null) {\r\n            let filteredStyle = item.filter(i => i.style === styleField.textContent)\r\n            if (filteredStyle.length) {\r\n                if (filteredStyle[0].process.length) {\r\n                    filteredStyle[0].process.unshift('ISR')\r\n                    let uniqueFilteredStyle = [...new Set(filteredStyle[0].process)]\r\n                    setRouteList(uniqueFilteredStyle)\r\n                }\r\n            }     \r\n        }\r\n    }, [ISRItem])\r\n\r\n    return ( \r\n        <Container className=\"print-form\">\r\n            <p className=\"print-form-title\">GOLDEN ZONE GARMENTS AND ACCESSORIES,INC ROUTE SHEET</p>\r\n            <Row>\r\n                <Col sm={6} className=\"print-form-details\">\r\n                    <ul>\r\n                        <li>CUSTOMER: <span>{ISRItem.detail_customer}</span></li>\r\n                        <li>PO #: <span>{ ISRItem.po_number}</span></li>\r\n                        <li>STYLE: <span id=\"style-field\">0</span> </li>\r\n                        <li>DESCRIPTION: <span>{ ISRItem.description}</span></li>\r\n                        <li>COLOR: <span>{ISRItem.color}</span></li>\r\n                        <li>SIZE: <span>{ISRItem.size}</span></li>\r\n                        <li>TOTAL Q'TY: <span>{ ISRItem.total}</span></li>\r\n                        <li>Q'TY/SACK: <span>{ ISRItem.qty_sack}</span></li>\r\n                        <li>SHIPDATE: <span>{ISRItem.ship_date}</span></li>\r\n                    </ul>\r\n                </Col>\r\n                <Col sm={4}>\r\n                    <div className=\"print-sack-number\">\r\n                        <p>SACK NO.</p>\r\n                        <p> 0 / { ISRItem.total_sack}</p>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            {/* <div style={{padding:\"30px\"}}></div> */}\r\n            {/* <div className=\"print-barcode\">\r\n                <Image ref={inputRef} />\r\n            </div> */}\r\n            <Row>\r\n                <Col lg={11}>\r\n                    <Table bordered className=\"route-table\">\r\n                    <thead>\r\n                        <tr>\r\n                        <th>OPERATION</th>\r\n                        <th>TRANSFERRED BY (NAME/DATE)</th>\r\n                        <th>TRANSFER TO</th>\r\n                        <th>RECEIVED BY (NAME/DATE)</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {routeList && routeList.map((route, index) => {\r\n                            if (routeList.length !== index+1) {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td>{route.toUpperCase()}</td>\r\n                                        <td></td>\r\n                                        <td>{routeList[index + 1].toUpperCase()}</td>\r\n                                        <td></td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                            \r\n                        })}\r\n                        {/* <tr>\r\n                        <td>ISR</td>\r\n                        <td></td>\r\n                        <td>KNITTING</td>\r\n                        <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                        <td>KNITTING</td>\r\n                        <td></td>\r\n                        <td>SEWING</td>\r\n                        <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                        <td>SEWING</td>\r\n                        <td></td>\r\n                        <td>FINAL EXAM</td>\r\n                        <td></td>\r\n                        </tr> */}\r\n                    </tbody>\r\n                    </Table>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n     );\r\n}\r\n\r\nexport default ISRPrintComponent\r\n","D:\\PROJECTS\\frontgold\\src\\api\\index.js",[],"D:\\PROJECTS\\frontgold\\src\\reducers\\RootReducer.js",[],"D:\\PROJECTS\\frontgold\\src\\reducers\\ItemReducer.js",["249"],"export default (item = [], action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_ITEMS':\r\n            return action.payload\r\n        case 'CREATE_ITEM':\r\n            return [...item, action.payload]\r\n        default:\r\n            return item\r\n    }\r\n}","D:\\PROJECTS\\frontgold\\src\\reducers\\DetailsReducer.js",["250"],"export default (details = [], action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_DETAILS':\r\n            return action.payload\r\n        case 'CREATE_DETAILS':\r\n            return [...details, action.payload]\r\n        default:\r\n            return details\r\n    }\r\n}","D:\\PROJECTS\\frontgold\\src\\actions\\DetailsActions.js",[],"D:\\PROJECTS\\frontgold\\src\\actions\\ItemActions.js",[],"D:\\PROJECTS\\frontgold\\src\\reducers\\BarcodeScanReducer.js",["251"],"export default (barcodeScanResult = [], action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_BARCODE\":\r\n      return action.payload\r\n    case \"POST_BARCODE\":\r\n      return action.payload\r\n    case \"INSERT_BR\":\r\n      return action.payload\r\n    case \"POST_BARCODE_ERROR\":\r\n      // alert(action.error)\r\n      barcodeScanResult = []\r\n      return barcodeScanResult\r\n    case \"FETCH_BARCODE_ERROR\":\r\n      return barcodeScanResult\r\n    default:\r\n      return barcodeScanResult\r\n  }\r\n}\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\BarcodeScan.js\\BarcodeScan.js",["252"],"import React, { useState, useEffect } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport BarcodeScanPanel from \"./BarcodeScanPanel\"\r\nimport BarcodeScanResult from \"./BarcodeScanResult\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport {\r\n  clearResults,\r\n  postBarcodeDetails,\r\n} from \"../../../../actions/BarcodeScanActions\"\r\n\r\nfunction BarcodeScan() {\r\n  const dispatch = useDispatch()\r\n\r\n  const [barcodeInput, setBarcodeInput] = useState({\r\n    barcode: \"\",\r\n  })\r\n  const [barcodeCopy, setBarcodeCopy] = useState({\r\n    barcode: \"\",\r\n  })\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    let barcodeField = document.getElementById(\"barcodeInput\")\r\n    barcodeField.value = \"\"\r\n    //dispatch\r\n    setBarcodeCopy(barcodeInput)\r\n    dispatch(postBarcodeDetails(barcodeInput))\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(clearResults())\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"barcode-wrapper\">\r\n      <div className=\"barcode-scan-container\">\r\n        <div className=\"barcode-primary-div\">\r\n          <Row>\r\n            <Col xl={5} lg={4} md={10} sm={10}>\r\n              <BarcodeScanPanel\r\n                barcodeInput={barcodeInput}\r\n                handleSubmit={handleSubmit}\r\n                setBarcodeInput={setBarcodeInput}\r\n              />\r\n            </Col>\r\n            <Col xl={7} lg={7} md={10} sm={10} className=\"col-res\">\r\n              <BarcodeScanResult barcodeCopy={barcodeCopy} />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BarcodeScan\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\PO\\PO.js",["253","254","255","256","257","258","259"],"import React, { useState, useEffect } from \"react\"\r\nimport {\r\n  Table,\r\n  Col,\r\n  Row,\r\n  Button,\r\n  Form,\r\n  Card,\r\n  ButtonGroup,\r\n} from \"react-bootstrap\"\r\nimport POPrintComponent from \"./POPrintComponent\"\r\nimport POTable from \"./POTable\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { fetchDetails } from \"../../../../actions/DetailsActions\"\r\nimport html2canvas from \"html2canvas\"\r\nimport { jsPDF } from \"jspdf\"\r\n\r\nfunction PO({ setSidebar, sidebar }) {\r\n  const [searchInput, setSearchInput] = useState(null)\r\n  const [searchResult, setSearchResult] = useState(null)\r\n  const [selectedPO, setSelectedPO] = useState(null)\r\n  const [routeList, setRouteList] = useState([])\r\n  const [generatedBarcode, setGeneratedBarcode] = useState(null)\r\n  const [dummyState, setDummyState] = useState(false)\r\n\r\n  const dispatch = useDispatch()\r\n  const details = useSelector((state) => state.details)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchDetails())\r\n  }, [dummyState])\r\n\r\n  useEffect(() => {\r\n    if (selectedPO) {\r\n      if (selectedPO.length) {\r\n        selectedPO[0].detail_style.process.unshift(\"ISR\")\r\n        let uniqueFilteredRoute = [\r\n          ...new Set(selectedPO[0].detail_style.process),\r\n        ]\r\n        setRouteList(uniqueFilteredRoute)\r\n      }\r\n    }\r\n  }, [selectedPO])\r\n\r\n  useEffect(() => {\r\n    const resultfilt = details.filter((det) => det.active === true)\r\n    setSearchResult(resultfilt)\r\n  }, [details])\r\n\r\n  useEffect(() => {\r\n    if (details) {\r\n      if (details.length) {\r\n        const searchResult = details.filter(\r\n          (det) =>\r\n            (det.po_number.includes(searchInput) ||\r\n              det.detail_customer.toUpperCase().includes(searchInput)) &&\r\n            det.active === true\r\n        )\r\n        setSearchResult(searchResult)\r\n      }\r\n    }\r\n  }, [searchInput])\r\n\r\n  const handlePrint = () => {\r\n    const input = document.getElementById(\"printForm\")\r\n\r\n    html2canvas(input, {\r\n      useCORS: true,\r\n      allowTaint: true,\r\n      scrollY: -window.scrollY,\r\n    }).then((canvas) => {\r\n      const imgData = canvas.toDataURL(\"image/png\")\r\n      const pdf = new jsPDF(\"p\", \"px\", \"a4\")\r\n      let pageWidth = pdf.internal.pageSize.getWidth()\r\n      let pageHeight = pdf.internal.pageSize.getHeight()\r\n\r\n      const widthRatio = pageWidth / canvas.width\r\n      const heightRatio = pageHeight / canvas.height\r\n\r\n      const canvasWidth = canvas.width * widthRatio\r\n      const canvasHeight = canvas.height * heightRatio\r\n\r\n      const marginX = (pageWidth - canvasWidth) / 2\r\n      const marginY = (pageHeight - canvasHeight + 50) / 2\r\n\r\n      pdf.addImage(\r\n        imgData,\r\n        \"JPEG\",\r\n        marginX,\r\n        marginY,\r\n        canvasWidth,\r\n        canvasHeight + 250\r\n      )\r\n      pdf.save(generatedBarcode)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"po-wrapper\">\r\n      <div className=\"po-container\">\r\n        <Row>\r\n          <Col lg={6} md={11} sm={11}>\r\n            <POTable\r\n              generatedBarcode={generatedBarcode}\r\n              setGeneratedBarcode={setGeneratedBarcode}\r\n              handlePrint={handlePrint}\r\n              searchResult={searchResult}\r\n              details={details}\r\n              selectedPO={selectedPO}\r\n              searchInput={searchInput}\r\n              setSearchInput={setSearchInput}\r\n              setSelectedPO={setSelectedPO}\r\n              dummyState={dummyState}\r\n              setDummyState={setDummyState}\r\n              setSidebar={setSidebar}\r\n              sidebar={sidebar}\r\n            />\r\n          </Col>\r\n          <Col lg={6} md={11} sm={11}>\r\n            <POPrintComponent\r\n              generatedBarcode={generatedBarcode}\r\n              routeList={routeList}\r\n              selectedPO={selectedPO}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PO\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\BarcodeScan.js\\BarcodeScanPanel.js",["260","261","262","263","264"],"import React, { useEffect, useState } from \"react\"\r\nimport { Form, Button, Modal, Image, Row, Col } from \"react-bootstrap\"\r\nimport FocusLock from \"react-focus-lock\"\r\nimport { undoScan } from \"../../../../api\"\r\nimport { useAlert } from \"react-alert\"\r\nimport * as FaIcons from \"react-icons/fa\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { clearResults, insertBR } from \"../../../../actions/BarcodeScanActions\"\r\n\r\nfunction BarcodeScanPanel({\r\n  setBarcodeInput,\r\n  handleSubmit,\r\n\r\n  barcodeInput,\r\n}) {\r\n  const dispatch = useDispatch()\r\n  const alert = useAlert()\r\n\r\n  //modal\r\n  const [showw, setShoww] = useState(false)\r\n  const [show, setShow] = useState(false)\r\n\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => setShow(true)\r\n  const [barcodeUndo, setBarcodeUndo] = useState(null)\r\n  //modal\r\n\r\n  const handleChangeUndo = (e) => {\r\n    console.log(e.target.value)\r\n    setBarcodeUndo({\r\n      barcode: e.target.value,\r\n    })\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setTimeout(() => {\r\n      if (document.getElementById(\"barcodeInput\") !== null) {\r\n        if (document.getElementById(\"barcodeInput\").value !== \"\") {\r\n          document.getElementById(\"barcodeInput\").value = \"\"\r\n        }\r\n      }\r\n    }, 10000)\r\n    setBarcodeInput({\r\n      barcode: e.target.value,\r\n    })\r\n  }\r\n\r\n  const handleUndo = async () => {\r\n    if (barcodeUndo.barcode !== null) {\r\n      const res = await undoScan(barcodeUndo)\r\n      if (res.data) {\r\n        dispatch(insertBR(res.data))\r\n        alert.show(\r\n          <div className=\"alert-suc\">\r\n            <FaIcons.FaCheck /> {'\"' + res.data + '\"' + \" process complete!\"}\r\n          </div>\r\n        )\r\n        setShoww(false)\r\n        setBarcodeUndo(null)\r\n      } else {\r\n        alert.show(\r\n          <div className=\"alert-err\">\r\n            <FaIcons.FaCheck /> Undo Error! ask admin for help.\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"barcode-scan-panel\">\r\n      <Modal\r\n        show={showw}\r\n        onHide={() => setShoww(false)}\r\n        animation={false}\r\n        centered\r\n        size=\"lg\"\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"example-modal-sizes-title-md\">\r\n            <h6>Undo Scan</h6>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ padding: \"2em\" }}>\r\n          Are you sure you want to undo the process for \"{\" \"}\r\n          {barcodeUndo ? barcodeUndo.barcode : null} \" ?\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"secondary\"\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              setShoww(false)\r\n              handleShow()\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"danger\" size=\"sm\" onClick={handleUndo}>\r\n            Proceed\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        animation={false}\r\n        centered\r\n        size=\"lg\"\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"example-modal-sizes-title-md\">\r\n            <h6>Undo Scan</h6>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={{ padding: \"2em\" }}>\r\n          <Form onSubmit={(e) => e.preventDefault()}>\r\n            <Form.Group>\r\n              <Form.Label>QR Code:</Form.Label>\r\n              <FocusLock>\r\n                <Form.Control type=\"text\" onChange={handleChangeUndo} />\r\n              </FocusLock>\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" size=\"sm\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"danger\"\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              if (barcodeUndo) {\r\n                setShoww(true)\r\n                handleClose()\r\n              }\r\n            }}\r\n          >\r\n            Undo\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <h4 className=\"form-title\" style={{ textAlign: \"center\" }}>\r\n        QR Code Scan\r\n      </h4>\r\n      <br />\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group controlId=\"barcodeInput\">\r\n          <Form.Label>Scan:</Form.Label>\r\n          <FocusLock>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Scan here\"\r\n              onChange={handleChange}\r\n            />\r\n          </FocusLock>\r\n        </Form.Group>\r\n      </Form>\r\n      <br />\r\n\r\n      <hr />\r\n      <div className=\"qrcode-instructions\">\r\n        <h5>Instructions</h5>\r\n        <p>1. Make sure the cursor is focused on the \"Scan here\" field</p>\r\n        <p>2. Scan the barcode located at the bottom of the route sheet</p>\r\n        <h5>Reminder</h5>\r\n        <p>* Scanning should be done once for each sack on each process *</p>\r\n      </div>\r\n\r\n      <br />\r\n      <hr />\r\n      <br />\r\n      <Button\r\n        variant=\"danger\"\r\n        className=\"btn-undo\"\r\n        block\r\n        size=\"sm\"\r\n        id=\"undo-btn\"\r\n        onClick={handleShow}\r\n      >\r\n        UNDO SCAN\r\n      </Button>\r\n      <Button\r\n        variant=\"info\"\r\n        className=\"btn-undo\"\r\n        block\r\n        size=\"sm\"\r\n        onClick={() => {\r\n          dispatch(clearResults())\r\n        }}\r\n      >\r\n        CLEAR RESULT\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BarcodeScanPanel\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\BarcodeScan.js\\BarcodeScanResult.js",["265"],"import React, { useEffect } from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { Row } from \"react-bootstrap\"\r\n\r\nfunction BarcodeScanResult({ barcodeCopy }) {\r\n  const barcodeScanResult = useSelector((state) => state.barcodeScanResult)\r\n\r\n  useEffect(() => {\r\n    console.log(barcodeScanResult)\r\n    console.log(barcodeScanResult.length)\r\n  }, [barcodeScanResult])\r\n  return (\r\n    <div className=\"barcode-scan-result\">\r\n      <h4 className=\"form-title\" style={{ textAlign: \"center\" }}>\r\n        Result\r\n      </h4>\r\n      <br />\r\n      <br />\r\n\r\n      {barcodeScanResult.length && barcodeCopy.barcode ? (\r\n        <div className=\"details-result\">\r\n          <p>\r\n            <span>{barcodeCopy.barcode}</span>\r\n          </p>\r\n          <h2>\r\n            PO Number:<span>{barcodeCopy.barcode.split(\"-\")[1]}</span>\r\n          </h2>\r\n          <h2>\r\n            STYLE:<span>{barcodeCopy.barcode.split(\"-\")[0]}</span>\r\n          </h2>\r\n          <h2>\r\n            COLOR:\r\n            <span>{barcodeCopy.barcode.split(\"-\")[2].split(\"$\")[0]}</span>\r\n          </h2>\r\n          <h2>\r\n            SIZE:\r\n            <span>{barcodeCopy.barcode.split(\"-\")[2].split(\"$\")[1]}</span>\r\n          </h2>\r\n          <h2>\r\n            SACK #:<span>{barcodeCopy.barcode.split(\"-\")[3]}</span>\r\n          </h2>\r\n          <h2>\r\n            CURRENT PROCESS:<span>{barcodeScanResult.split(\",\")[0]}</span>\r\n          </h2>\r\n          <h2>\r\n            NEXT PROCESS:<span>{barcodeScanResult.split(\",\")[1]}</span>\r\n          </h2>\r\n        </div>\r\n      ) : (\r\n        <p>No Result</p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BarcodeScanResult\r\n","D:\\PROJECTS\\frontgold\\src\\actions\\BarcodeScanActions.js",[],"D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\PO\\POPrintComponent.js",["266","267","268"],"import React from \"react\"\r\nimport { Col, Container, Table, Row } from \"react-bootstrap\"\r\nimport QRCode from \"qrcode.react\"\r\n\r\nfunction POTable({ selectedPO, routeList, generatedBarcode }) {\r\n  return (\r\n    <div className=\"po-container-print-div\">\r\n      {selectedPO ? (\r\n        selectedPO.length ? (\r\n          <>\r\n            <div className=\"po-container-print\" id=\"printForm\">\r\n              <p className=\"print-form-title\">\r\n                GOLDEN ZONE GARMENTS AND ACCESSORIES,INC ROUTE SHEET\r\n              </p>\r\n              <Row>\r\n                <Col sm={6} className=\"print-form-details\">\r\n                  <ul>\r\n                    <li>\r\n                      CUSTOMER: <span>{selectedPO[0].detail_customer}</span>\r\n                    </li>\r\n                    <li>\r\n                      PO #: <span>{selectedPO[0].po_number}</span>\r\n                    </li>\r\n                    <li>\r\n                      STYLE: <span>{selectedPO[0].detail_style.style}</span>{\" \"}\r\n                    </li>\r\n                    <li>\r\n                      DESCRIPTION: <span>{selectedPO[0].description}</span>\r\n                    </li>\r\n                    <li>\r\n                      COLOR: <span>{selectedPO[0].color}</span>\r\n                    </li>\r\n                    <li>\r\n                      TOTAL Q'TY: <span>{selectedPO[0].total}</span>\r\n                    </li>\r\n                    <li>\r\n                      Q'TY/SACK:\r\n                      <span>\r\n                        {generatedBarcode.split(\"-\")[5] ==\r\n                        selectedPO[0].total_sack\r\n                          ? selectedPO[0].qty_sack -\r\n                            (selectedPO[0].qty_sack * selectedPO[0].total_sack -\r\n                              selectedPO[0].total)\r\n                          : selectedPO[0].qty_sack}\r\n                      </span>\r\n                    </li>\r\n                    <li>\r\n                      SHIPDATE: <span>{selectedPO[0].ship_date}</span>\r\n                    </li>\r\n                  </ul>\r\n                </Col>\r\n                <Col sm={4}>\r\n                  <div className=\"print-sack-number\">\r\n                    <p>SACK NO.</p>\r\n                    <p>\r\n                      {\" \"}\r\n                      {generatedBarcode.split(\"-\")[5]} /{\" \"}\r\n                      {selectedPO[0].total_sack}\r\n                    </p>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col lg={11}>\r\n                  <Table bordered className=\"route-table\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>OPERATION</th>\r\n                        <th>TRANSFERRED BY (NAME/DATE)</th>\r\n                        <th>TRANSFER TO</th>\r\n                        <th>RECEIVED BY (NAME/DATE)</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {routeList &&\r\n                        routeList.map((route, index) => {\r\n                          if (routeList.length !== index + 1) {\r\n                            return (\r\n                              <tr key={index}>\r\n                                <td>{route.toUpperCase()}</td>\r\n                                <td></td>\r\n                                <td>{routeList[index + 1].toUpperCase()}</td>\r\n                                <td></td>\r\n                              </tr>\r\n                            )\r\n                          }\r\n                        })}\r\n                    </tbody>\r\n                  </Table>\r\n                </Col>\r\n              </Row>\r\n\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  marginLeft: \"35px\",\r\n                  marginRight: \"35px\",\r\n                }}\r\n              >\r\n                {/* <div className=\"print-barcode\">\r\n                                <ReactBarcode value={generatedBarcode} width={0.4} height={55} margin={0} fontSize={6} />\r\n                            </div> */}\r\n                <QRCode\r\n                  value={generatedBarcode}\r\n                  style={{\r\n                    display: \"block\",\r\n                    marginRight: \"30px\",\r\n                    width: \"4vw\",\r\n                    height: \"7vh\",\r\n                  }}\r\n                />\r\n                <p style={{ fontSize: \"10px\" }}>{generatedBarcode}</p>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <p>loading..</p>\r\n        )\r\n      ) : (\r\n        <p style={{ marginTop: \"48%\", textAlign: \"center\" }}>\r\n          SELECT PO TO GENERATE ROUTE SHEET\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default POTable\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\PO\\POTable.js",["269","270","271","272","273"],"import React, { useEffect, useState } from \"react\"\r\nimport { Table, Col, Row, Button, Form, Card } from \"react-bootstrap\"\r\nimport { fetchPurchase, addPurchase } from \"../../../../api\"\r\nimport Moment from \"react-moment\"\r\nimport \"moment-timezone\"\r\nimport * as FaIcons from \"react-icons/fa\"\r\nimport * as BiIcons from \"react-icons/bi\"\r\n\r\nimport { useAlert } from \"react-alert\"\r\nimport axios from \"axios\"\r\n\r\nfunction POPrintComponent({\r\n  sidebar,\r\n  setSidebar,\r\n  setSearchInput,\r\n  setSelectedPO,\r\n  details,\r\n  selectedPO,\r\n  searchResult,\r\n  handlePrint,\r\n  setGeneratedBarcode,\r\n  generatedBarcode,\r\n  dummyState,\r\n  setDummyState,\r\n}) {\r\n  const alert = useAlert()\r\n\r\n  const handleChange = (e) => {\r\n    setSearchInput(e.target.value.toUpperCase())\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n  }\r\n\r\n  const handleProcess = async () => {\r\n    if (!sidebar) {\r\n      const res = await addPurchase(purchaseToSubmit)\r\n\r\n      if (res !== null) {\r\n        alert.show(\r\n          <div className=\"alert-suc\">\r\n            <FaIcons.FaCheck /> {generatedBarcode} is on-process!{\" \"}\r\n          </div>\r\n        )\r\n      } else {\r\n        alert.show(\r\n          <div className=\"alert-err\">\r\n            <BiIcons.BiError /> Unable to process {generatedBarcode}!\r\n          </div>\r\n        )\r\n      }\r\n      //update\r\n\r\n      if (\r\n        generatedBarcode.split(\"-\")[5].toString() ===\r\n        selectedPO[0].total_sack.toString()\r\n      ) {\r\n        await axios\r\n          .post(\r\n            window.location.protocol +\r\n              \"//\" +\r\n              window.location.hostname +\r\n              \":8000/api/detail-update/\" +\r\n              selectedPO[0].id,\r\n            { active: \"false\" },\r\n            {\r\n              headers: {\r\n                Authorization:\r\n                  \"token \" +\r\n                  JSON.parse(window.localStorage.getItem(\"credentials\")).token,\r\n              },\r\n            }\r\n          )\r\n          .then(() => {\r\n            setDummyState(!dummyState)\r\n            handlePrint()\r\n            setSelectedPO(null)\r\n          })\r\n          .catch((err) => console.log(err))\r\n        console.log(\"request finished\")\r\n      } else {\r\n        setDummyState(!dummyState)\r\n        handlePrint()\r\n        setSelectedPO(null)\r\n      }\r\n    } else {\r\n      alert.show(\r\n        <div className=\"alert-err\">\r\n          <BiIcons.BiError /> Please close the sidebar before printing!\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  const [purchaseResult, setpurchaseResult] = useState(null)\r\n  const [filteredPurchaseResult, setfilteredPurchaseResult] = useState(null)\r\n  const [purchaseActive, setPurchaseActive] = useState([])\r\n\r\n  const [purchaseToSubmit, setpurchaseToSubmit] = useState(null)\r\n\r\n  useEffect(() => {\r\n    setDummyState(!dummyState)\r\n  }, [])\r\n\r\n  useEffect(async () => {\r\n    let flag = true\r\n    if (flag) {\r\n      const purchaseResult = await fetchPurchase()\r\n\r\n      setpurchaseResult(purchaseResult.data)\r\n    }\r\n    return () => {\r\n      flag = false\r\n    }\r\n  }, [dummyState])\r\n\r\n  useEffect(() => {\r\n    if (purchaseResult && searchResult) {\r\n      if (searchResult.length) {\r\n        let purchaseResActive = []\r\n        for (let j = 0; j != searchResult.length; j++) {\r\n          let ctr = 0\r\n          for (let i = 0; i != purchaseResult.length; i++) {\r\n            if (\r\n              purchaseResult[i].po_number.po_number ===\r\n                searchResult[j].po_number &&\r\n              purchaseResult[i].po_number.color === searchResult[j].color &&\r\n              purchaseResult[i].po_number.size === searchResult[j].size &&\r\n              purchaseResult[i].po_number.detail_style.style ===\r\n                searchResult[j].detail_style.style\r\n            ) {\r\n              ctr++\r\n            }\r\n          }\r\n          purchaseResActive.push(ctr)\r\n        }\r\n\r\n        setPurchaseActive(purchaseResActive)\r\n      }\r\n    }\r\n  }, [purchaseResult, searchResult])\r\n\r\n  useEffect(() => {\r\n    if (filteredPurchaseResult && selectedPO) {\r\n      if (selectedPO.length) {\r\n        setpurchaseToSubmit({\r\n          po_number: selectedPO[0].id,\r\n          barcode: generatedBarcode,\r\n          sack_number: filteredPurchaseResult.length + 1,\r\n        })\r\n      }\r\n    }\r\n  }, [generatedBarcode, selectedPO, filteredPurchaseResult])\r\n\r\n  const handleSelect = (po, color, size, style, index) => {\r\n    let selectedDetails = details.filter((det) => {\r\n      return det.po_number === po && det.color === color && det.size === size\r\n    })\r\n    // const purchaseResult = await fetchPurchase()\r\n    let filterPurchase = purchaseResult.filter((pr) => {\r\n      return (\r\n        pr.po_number.po_number === po &&\r\n        pr.po_number.color === color &&\r\n        pr.po_number.size === size &&\r\n        pr.po_number.detail_style.style === style\r\n      )\r\n    })\r\n    setfilteredPurchaseResult(filterPurchase)\r\n    let qtyS =\r\n      selectedDetails[0].total_sack === filterPurchase.length + 1\r\n        ? selectedDetails[0].qty_sack -\r\n          (selectedDetails[0].qty_sack * selectedDetails[0].total_sack -\r\n            selectedDetails[0].total)\r\n        : selectedDetails[0].qty_sack\r\n    let genCode =\r\n      selectedDetails[0].detail_style.style +\r\n      \"-\" +\r\n      selectedDetails[0].po_number +\r\n      \"-\" +\r\n      selectedDetails[0].color +\r\n      \"$\" +\r\n      selectedDetails[0].size +\r\n      \"-\" +\r\n      selectedDetails[0].total +\r\n      \"-\" +\r\n      qtyS +\r\n      \"-\" +\r\n      (filterPurchase.length + 1)\r\n    setGeneratedBarcode(genCode)\r\n    setSelectedPO(selectedDetails)\r\n  }\r\n\r\n  return (\r\n    <div className=\"po-container-form\">\r\n      <div style={{ marginBottom: \"1vh\" }}>\r\n        <h5 className=\"form-title\">PURCHASE ORDERS</h5>\r\n      </div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Group>\r\n          <Form.Label style={{ color: \"white\" }}>SEARCH:</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            className=\"isr-form\"\r\n            onChange={handleChange}\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n      <div className=\"po-container-table\">\r\n        <Table\r\n          striped\r\n          bordered\r\n          hover\r\n          style={{ backgroundColor: \"white\", borderRadius: \"10px\" }}\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th>CUSTOMER</th>\r\n              <th>PO</th>\r\n              <th>COLOR</th>\r\n              <th>SIZE</th>\r\n              <th>TOTAL SACK</th>\r\n              <th>PENDING</th>\r\n              <th>ACTIVE</th>\r\n              <th>SELECT</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {searchResult && purchaseActive.length && searchResult.length ? (\r\n              searchResult.map((det, index) => {\r\n                return (\r\n                  <tr style={{ fontSize: \"0.8em\" }} key={index}>\r\n                    <td>\r\n                      {/* <Moment format=\"YYYY-MM-DD hh:mm:ss\"> */}\r\n                      {det.detail_customer}\r\n                      {/* </Moment> */}\r\n                    </td>\r\n                    <td>{det.po_number}</td>\r\n                    <td>{det.color}</td>\r\n                    <td>{det.size}</td>\r\n                    <td>{det.total_sack}</td>\r\n                    <td>{det.total_sack - purchaseActive[index]}</td>\r\n                    <td>{purchaseActive[index]}</td>\r\n                    <td>\r\n                      <Button\r\n                        onClick={() =>\r\n                          handleSelect(\r\n                            det.po_number,\r\n                            det.color,\r\n                            det.size,\r\n                            det.detail_style.style,\r\n                            index\r\n                          )\r\n                        }\r\n                      >\r\n                        SELECT\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                )\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan=\"8\" style={{ textAlign: \"center\" }}>\r\n                  No Result\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      <br />\r\n      <div className=\"po-card\">\r\n        <Card.Body as={Row}>\r\n          {selectedPO && purchaseToSubmit ? (\r\n            <>\r\n              <Col sm={9}>\r\n                <Card.Title style={{ fontSize: \"35px\" }}>\r\n                  {selectedPO[0].po_number}\r\n                </Card.Title>\r\n                <Card.Text style={{ fontStyle: \"italic\" }}>\r\n                  CUSTOMER: {selectedPO[0].detail_customer}\r\n                </Card.Text>\r\n              </Col>\r\n              <Col sm={2}>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  style={{ padding: \"20px 20px 20px 20px\" }}\r\n                  onClick={handleProcess}\r\n                >\r\n                  PROCESS 1 SACK\r\n                </Button>\r\n              </Col>\r\n            </>\r\n          ) : (\r\n            <p style={{ margin: \"21px\" }}>Select PO</p>\r\n          )}\r\n        </Card.Body>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default POPrintComponent\r\n","D:\\PROJECTS\\frontgold\\src\\components\\auth\\SignIn.js",["274"],"import React, { useEffect, useState } from \"react\"\r\nimport { Button, Alert, Form } from \"react-bootstrap\"\r\nimport { postCredentials } from \"../../actions/AuthActions\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nfunction SignIn({ setCached }) {\r\n  const dispatch = useDispatch()\r\n  const auth = useSelector((state) => state.auth)\r\n\r\n  const [creds, setCreds] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  })\r\n  useEffect(() => {\r\n    const cachedCreds = JSON.parse(window.localStorage.getItem(\"credentials\"))\r\n\r\n    // window.location.href = 'http://localhost:000/';\r\n    if (\r\n      cachedCreds == null &&\r\n      window.location.href !==\r\n        window.location.protocol +\r\n          \"//\" +\r\n          window.location.hostname +\r\n          \":\" +\r\n          window.location.port +\r\n          \"/\"\r\n    ) {\r\n      window.location.href =\r\n        window.location.protocol +\r\n        \"//\" +\r\n        window.location.hostname +\r\n        \":\" +\r\n        window.location.port +\r\n        \"/\"\r\n    }\r\n    console.log(window.location.href)\r\n    document.getElementById(\"login-error\").style.visibility = \"hidden\"\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const cachedCreds = JSON.parse(window.localStorage.getItem(\"credentials\"))\r\n    setCached(cachedCreds)\r\n  }, [auth])\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()\r\n    let btnlogin = document.getElementById(\"login-btn\")\r\n    btnlogin.innerHTML = \"Logging in ..\"\r\n    btnlogin.disabled = true\r\n    const res = await dispatch(postCredentials(creds))\r\n    console.log(res)\r\n    // if (res==200) {\r\n    //     window.location.reload();\r\n    // }\r\n    // console.log(res)/\\\r\n    if (res === \"400\") {\r\n      document.getElementById(\"login-error\").textContent =\r\n        \"Incorrect Username or Password\"\r\n      document.getElementById(\"login-error\").style.visibility = \"visible\"\r\n      btnlogin.innerHTML = \"Login\"\r\n      btnlogin.disabled = false\r\n    } else {\r\n      document.getElementById(\"login-error\").textContent = \"Unknown error\"\r\n      document.getElementById(\"login-error\").style.visibility = \"visible\"\r\n      btnlogin.innerHTML = \"Login\"\r\n      btnlogin.disabled = false\r\n    }\r\n  }\r\n  const handleChange = (e) => {\r\n    document.getElementById(\"login-error\").style.visibility = \"hidden\"\r\n    setCreds(\r\n      {\r\n        ...creds,\r\n        [e.target.id]: e.target.value,\r\n      },\r\n      console.log(creds)\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"signin-wrapper\">\r\n      <div className=\"signin-container\">\r\n        <h4 style={{ textAlign: \"center\" }} className=\"form-title\">\r\n          GOLDEN ZONE GARMENTS AND ACCESSORIES, INC\r\n        </h4>\r\n        <br />\r\n        <br />\r\n        <h1 className=\"form-title\" style={{ textAlign: \"center\" }}>\r\n          Login\r\n        </h1>\r\n        <br />\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group controlId=\"username\">\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control\r\n              required\r\n              type=\"text\"\r\n              placeholder=\"Enter Username\"\r\n              onChange={handleChange}\r\n            />\r\n            <Form.Text className=\"text-muted\">\r\n              We'll never share your Username with anyone else.\r\n            </Form.Text>\r\n          </Form.Group>\r\n\r\n          <Form.Group controlId=\"password\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control\r\n              required\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              onChange={handleChange}\r\n            />\r\n          </Form.Group>\r\n          <Button variant=\"primary\" type=\"submit\" id=\"login-btn\" block>\r\n            Login\r\n          </Button>\r\n          <br />\r\n          <Alert\r\n            variant=\"danger\"\r\n            id=\"login-error\"\r\n            style={{ textAlign: \"center\" }}\r\n          >\r\n            Incorrect Username or Password\r\n          </Alert>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignIn\r\n","D:\\PROJECTS\\frontgold\\src\\reducers\\AuthReducer.js",["275"],"export default (auth = [], action) => {\r\n    switch (action.type) {\r\n        case 'CREATE_SESSION':\r\n            window.localStorage.setItem(\"credentials\",JSON.stringify(action.payload))\r\n            return action.payload\r\n        case 'LOGOUT':\r\n             window.localStorage.clear();\r\n            return action.payload\r\n        case 'AUTH_ERROR':\r\n            window.localStorage.clear();\r\n            return action.error\r\n        default:\r\n            return auth\r\n    }\r\n}","D:\\PROJECTS\\frontgold\\src\\actions\\AuthActions.js",[],"D:\\PROJECTS\\frontgold\\src\\components\\pages\\home\\Home.js",[],"D:\\PROJECTS\\frontgold\\src\\components\\pages\\home\\PageUnavailable.js",[],"D:\\PROJECTS\\frontgold\\src\\components\\pages\\items\\ViewItems.js",["276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294"],"import React, { useEffect, useState } from \"react\"\r\nimport { Container, Table, Form, Button, Modal } from \"react-bootstrap\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getItems } from \"../../../actions/ItemActions\"\r\nimport * as FaIcons from \"react-icons/fa\"\r\nimport { MDBDataTable } from \"mdbreact\"\r\nimport { CSVLink } from \"react-csv\"\r\nimport moment from \"moment\"\r\n\r\nfunction ViewItems() {\r\n  const dispatch = useDispatch()\r\n  const item = useSelector((state) => state.item)\r\n\r\n  //modal\r\n  const [show, setShow] = useState(false)\r\n\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => setShow(true)\r\n  const [searchInput, setSearchInput] = useState(null)\r\n  const [searchResult, setSearchResult] = useState(null)\r\n  //modal\r\n\r\n  const [rowData, setRowData] = useState([])\r\n  const [csvdata, setCsvdata] = useState([])\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Date\",\r\n        field: \"date\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Customer\",\r\n        field: \"customer\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Style\",\r\n        field: \"style\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Process\",\r\n        field: \"process\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      // {\r\n      //   label: \"Action\",\r\n      //   field: \"action\",\r\n      //   sort: \"asc\",\r\n      //   width: 150,\r\n      // },\r\n    ],\r\n    rows: rowData,\r\n  }\r\n\r\n  const [ItemClass, setItemClass] = useState({\r\n    process: [],\r\n    customer: \"\",\r\n    style: \"\",\r\n  })\r\n\r\n  useEffect(() => {\r\n    console.log(ItemClass)\r\n  }, [ItemClass])\r\n  useEffect(() => {\r\n    dispatch(getItems())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log(item)\r\n    if (item && item.length) {\r\n      console.log(item[0].id)\r\n      const data = item.map((i) => {\r\n        return {\r\n          date: moment(i.create_on).format(\"YYYY-MM-DD HH:MM\"),\r\n          customer: i.customer.toUpperCase(),\r\n          style: i.style.toUpperCase(),\r\n          process: i.process.map((p, index) => {\r\n            if (index !== i.process.length - 1) {\r\n              return (p + \", \").toUpperCase()\r\n            } else {\r\n              return p.toUpperCase()\r\n            }\r\n          }),\r\n          // action: (\r\n          //   <Button\r\n          //     variant=\"info\"\r\n          //     size=\"sm\"\r\n          //     onClick={() => handleEdit(i)}\r\n          //     block\r\n          //   >\r\n          //     <FaIcons.FaEdit /> Edit\r\n          //   </Button>\r\n          // ),\r\n        }\r\n      })\r\n      console.log(data)\r\n      setRowData(data)\r\n      let csvd = item.map((i) => {\r\n        return [\r\n          moment(i.create_on).format(\"YYYY-MM-DD HH:MM\"),\r\n          i.customer.toUpperCase(),\r\n          i.style.toUpperCase(),\r\n          i.process.map((p, index) => {\r\n            if (index !== i.process.length - 1) {\r\n              return (p + \", \").toUpperCase()\r\n            } else {\r\n              return p.toUpperCase()\r\n            }\r\n          }),\r\n        ]\r\n      })\r\n      csvd.unshift([\"date\", \"customer\", \"style\", \"process\"])\r\n      console.log(csvd)\r\n      setCsvdata(csvd)\r\n    }\r\n  }, [item])\r\n\r\n  const handleFormChange = (e) => {\r\n    setItemClass({\r\n      ...ItemClass,\r\n      [e.target.id]: e.target.value,\r\n    })\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    let processList = []\r\n    let checkboxes = document.querySelectorAll(\"input[type=checkbox]:checked\")\r\n    for (let i = 0; i < checkboxes.length; i++) {\r\n      processList.push(checkboxes[i].value)\r\n    }\r\n    setItemClass({\r\n      ...ItemClass,\r\n      process: processList,\r\n    })\r\n  }\r\n\r\n  const [selectedItems, setSelectedItems] = useState(null)\r\n\r\n  const handleEdit = (i) => {\r\n    const selItem = item.filter((it) => {\r\n      return it.style === i.style\r\n    })\r\n    setSelectedItems(selItem)\r\n    setItemClass({\r\n      style: i.style.toUpperCase(),\r\n      customer: i.customer.toUpperCase(),\r\n      process: i.process,\r\n    })\r\n    handleShow()\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (show) {\r\n      let processCheckbox = document.getElementById(\"check1\")\r\n      if (processCheckbox && selectedItems && setSelectedItems.length) {\r\n        console.log(processCheckbox.length)\r\n        let checklength =\r\n          selectedItems[0].customer.toUpperCase() === \"TOTES\" ? 14 : 12\r\n        console.log(checklength)\r\n        for (let i = 1; i != checklength; i++) {\r\n          for (let j = 0; j != selectedItems[0].process.length; j++) {\r\n            if (\r\n              document.getElementById(`check${i}`).value ===\r\n              selectedItems[0].process[j]\r\n            ) {\r\n              document.getElementById(`check${i}`).checked = true\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [show])\r\n\r\n  return (\r\n    <div className=\"view-item-wrapper\">\r\n      <div className=\"view-item-container\">\r\n        {/* <Modal\r\n          show={show}\r\n          onHide={handleClose}\r\n          animation={false}\r\n          centered\r\n          size=\"lg\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"example-modal-sizes-title-md\">\r\n              <h6>Edit Item </h6>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            {selectedItems && selectedItems.length ? (\r\n              <div className=\"modal-edit\">\r\n                <Form id=\"form-add-item\">\r\n                  <Form.Group controlId=\"customer\">\r\n                    <Form.Label>Customer:</Form.Label>\r\n                    <Form.Control\r\n                      required\r\n                      type=\"text\"\r\n                      placeholder=\"Customer\"\r\n                      defaultValue={selectedItems[0].customer}\r\n                      onChange={handleFormChange}\r\n                      className=\"form-caps\"\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group controlId=\"style\">\r\n                    <Form.Label>Style:</Form.Label>\r\n                    <Form.Control\r\n                      required\r\n                      type=\"text\"\r\n                      placeholder=\"Style\"\r\n                      defaultValue={selectedItems[0].style}\r\n                      onChange={handleFormChange}\r\n                      className=\"form-caps\"\r\n                    />\r\n                  </Form.Group>\r\n                  {selectedItems[0].customer.toUpperCase() === \"TOTES\" ? (\r\n                    <Form.Group>\r\n                      <Form.Label>Process:</Form.Label>\r\n                      <Form.Check\r\n                        label=\"Knitting\"\r\n                        value=\"knitting\"\r\n                        id=\"check1\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"ISR 1\"\r\n                        value=\"isr_1\"\r\n                        id=\"check2\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"B1 Receipts\"\r\n                        value=\"reciepts\"\r\n                        id=\"check3\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Steaming\"\r\n                        value=\"steaming\"\r\n                        id=\"check4\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Examining\"\r\n                        value=\"examining\"\r\n                        id=\"check5\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"ISR 2\"\r\n                        value=\"isr_2\"\r\n                        id=\"check6\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Sewing\"\r\n                        value=\"sewing\"\r\n                        id=\"check7\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"ISR 3\"\r\n                        value=\"isr_3\"\r\n                        id=\"check8\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Steaming 1\"\r\n                        value=\"steaming_1\"\r\n                        id=\"check9\"\r\n                        onChange={handleChange}\r\n                      />\r\n\r\n                      <Form.Check\r\n                        label=\"Examining 1\"\r\n                        value=\"examining_1\"\r\n                        id=\"check10\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Tagging\"\r\n                        value=\"tagging\"\r\n                        id=\"check11\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Metal Detection\"\r\n                        value=\"metaldetect\"\r\n                        id=\"check12\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Boxing\"\r\n                        value=\"boxing\"\r\n                        id=\"check13\"\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Form.Group>\r\n                  ) : (\r\n                    <Form.Group>\r\n                      <Form.Label>Process:</Form.Label>\r\n                      <Form.Check\r\n                        label=\"Knitting\"\r\n                        value=\"knitting\"\r\n                        id=\"check1\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Cutting\"\r\n                        value=\"cutting\"\r\n                        id=\"check2\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"ISR 1\"\r\n                        value=\"isr_1\"\r\n                        id=\"check3\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Sewing\"\r\n                        value=\"sewing\"\r\n                        id=\"check4\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"ISR 2\"\r\n                        value=\"isr_2\"\r\n                        id=\"check5\"\r\n                        onChange={handleChange}\r\n                      />\r\n\r\n                      <Form.Check\r\n                        label=\"B1 Receipts\"\r\n                        value=\"reciepts\"\r\n                        id=\"check6\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Steaming\"\r\n                        value=\"steaming\"\r\n                        id=\"check7\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Tagging\"\r\n                        value=\"tagging\"\r\n                        id=\"check8\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Final Examination\"\r\n                        value=\"finalexam\"\r\n                        id=\"check9\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Metal Detection\"\r\n                        value=\"metaldetect\"\r\n                        id=\"check10\"\r\n                        onChange={handleChange}\r\n                      />\r\n                      <Form.Check\r\n                        label=\"Boxing\"\r\n                        value=\"boxing\"\r\n                        id=\"check11\"\r\n                        onChange={handleChange}\r\n                      />\r\n                    </Form.Group>\r\n                  )}\r\n                </Form>\r\n              </div>\r\n            ) : (\r\n              <p>loading</p>\r\n            )}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" size=\"sm\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" size=\"sm\" onClick={handleClose}>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal> */}\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h5 className=\"form-title\">ITEMS</h5>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            padding: \"20px 30px 20px 30px\",\r\n            // borderRadius: '5px',\r\n            height: \"90%\",\r\n            overflow: \"scroll\",\r\n            overflowX: \"hidden\",\r\n            marginTop: \"20px\",\r\n          }}\r\n        >\r\n          <MDBDataTable\r\n            entries={8}\r\n            striped\r\n            bordered\r\n            small\r\n            entriesOptions={[5, 8, 10, 15]}\r\n            striped\r\n            hover\r\n            className=\"data-style\"\r\n            data={data}\r\n            sortable={true}\r\n            // exportToCSV\r\n          />\r\n          {csvdata.length ? (\r\n            <CSVLink data={csvdata} filename={\"items_data.csv\"}>\r\n              Export CSV\r\n            </CSVLink>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ViewItems\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\PO\\ViewBarcodes.js",["295","296","297","298","299","300"],"import React, { useEffect, useState } from \"react\"\r\nimport { Button, Table, Form } from \"react-bootstrap\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { fetchPurchaseDetails } from \"../../../../actions/BarcodeScanActions\"\r\nimport { MDBDataTable } from \"mdbreact\"\r\nimport { CSVLink } from \"react-csv\"\r\nimport moment from \"moment\"\r\n\r\nfunction ViewBarcodes({ isMain }) {\r\n  const dispatch = useDispatch()\r\n  const barcodeScanResult = useSelector((state) => state.barcodeScanResult)\r\n  const [rowData, setRowData] = useState([])\r\n  const [csvdata, setCsvdata] = useState([])\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPurchaseDetails())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log(barcodeScanResult)\r\n    if (barcodeScanResult.length && barcodeScanResult[0].create_on && !isMain) {\r\n      const data = barcodeScanResult.map((i) => {\r\n        return {\r\n          date: moment(i.create_on).format(\"YYYY-MM-DD HH:MM\"),\r\n          barcode: i.barcode.toUpperCase(),\r\n          style: i.po_number.detail_style.style,\r\n          po: i.po_number.po_number.toUpperCase(),\r\n          color: i.po_number.color.toUpperCase(),\r\n          size: i.po_number.size.toUpperCase(),\r\n          qtysack: i.barcode.split(\"-\")[4],\r\n          sackno: i.barcode.split(\"-\")[5],\r\n        }\r\n      })\r\n      console.log(data)\r\n      setRowData(data)\r\n      let csvd = barcodeScanResult.map((i) => {\r\n        return [\r\n          moment(i.create_on).format(\"YYYY-MM-DD HH:MM\"),\r\n          i.barcode.toUpperCase(),\r\n          i.po_number.detail_style.style,\r\n          i.po_number.po_number.toUpperCase(),\r\n          i.po_number.color.toUpperCase(),\r\n          i.po_number.size.toUpperCase(),\r\n          i.barcode.split(\"-\")[4],\r\n          i.barcode.split(\"-\")[5],\r\n        ]\r\n      })\r\n      csvd.unshift([\r\n        \"date\",\r\n        \"barcode\",\r\n        \"style\",\r\n        \"po#\",\r\n        \"color\",\r\n        \"size\",\r\n        \"qty/sack\",\r\n        \"sack#\",\r\n      ])\r\n      console.log(csvd)\r\n      setCsvdata(csvd)\r\n    } else if (\r\n      barcodeScanResult.length &&\r\n      barcodeScanResult[0].create_on &&\r\n      isMain\r\n    ) {\r\n      const data = barcodeScanResult.map((i) => {\r\n        return {\r\n          date: moment(i.create_on).format(\"YYYY-MM-DD HH:MM\"),\r\n          barcode: i.barcode.toUpperCase(),\r\n        }\r\n      })\r\n      setRowData(data)\r\n      let csvd = barcodeScanResult.map((i) => {\r\n        return [\r\n          moment(i.create_on).format(\"YYYY-MM-DD HH:MM\"),\r\n          i.barcode.toUpperCase(),\r\n        ]\r\n      })\r\n      csvd.unshift([\"date\", \"barcode\"])\r\n      setCsvdata(csvd)\r\n    }\r\n  }, [barcodeScanResult])\r\n\r\n  const data = {\r\n    columns: isMain\r\n      ? [\r\n          {\r\n            label: \"Date\",\r\n            field: \"date\",\r\n            sort: \"asc\",\r\n            width: 150,\r\n          },\r\n          {\r\n            label: \"Barcode\",\r\n            field: \"barcode\",\r\n            sort: \"asc\",\r\n            width: 150,\r\n          },\r\n        ]\r\n      : [\r\n          {\r\n            label: \"Date\",\r\n            field: \"date\",\r\n            sort: \"asc\",\r\n            width: 150,\r\n          },\r\n          {\r\n            label: \"Barcode\",\r\n            field: \"barcode\",\r\n            sort: \"asc\",\r\n            width: 150,\r\n          },\r\n          {\r\n            label: \"Style\",\r\n            field: \"style\",\r\n            sort: \"asc\",\r\n            width: 150,\r\n          },\r\n          {\r\n            label: \"Po #\",\r\n            field: \"po\",\r\n            sort: \"asc\",\r\n            width: 150,\r\n          },\r\n          {\r\n            label: \"Color\",\r\n            field: \"color\",\r\n            sort: \"asc\",\r\n            width: 150,\r\n          },\r\n          {\r\n            label: \"Size\",\r\n            field: \"size\",\r\n            sort: \"asc\",\r\n            width: 150,\r\n          },\r\n          {\r\n            label: \"Qty/Sack\",\r\n            field: \"qtysack\",\r\n            sort: \"asc\",\r\n            width: 150,\r\n          },\r\n          {\r\n            label: \"Sack #\",\r\n            field: \"sackno\",\r\n            sort: \"asc\",\r\n            width: 150,\r\n          },\r\n        ],\r\n    rows: rowData,\r\n  }\r\n  return (\r\n    <div className=\"view-item-wrapper\">\r\n      <div className=\"view-item-container\">\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h5 className=\"form-title\">BARCODES</h5>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            padding: \"20px\",\r\n            // borderRadius: '5px',\r\n            height: \"90%\",\r\n            overflow: \"scroll\",\r\n            overflowX: \"hidden\",\r\n            marginTop: \"20px\",\r\n          }}\r\n        >\r\n          <MDBDataTable\r\n            entries={8}\r\n            striped\r\n            bordered\r\n            small\r\n            entriesOptions={[5, 8, 10, 15]}\r\n            striped\r\n            hover\r\n            className=\"data-style\"\r\n            data={data}\r\n          />\r\n          {csvdata.length ? (\r\n            <CSVLink\r\n              data={csvdata}\r\n              filename={isMain ? \"barcodes_data_main.csv\" : \"barcodes_data.csv\"}\r\n            >\r\n              Export CSV\r\n            </CSVLink>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ViewBarcodes\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\process\\ISR\\ViewDetails.js",["301","302","303","304","305","306","307","308","309","310"],"import React, { useEffect, useState } from \"react\"\r\nimport { Button, Modal, Form, Col, Row } from \"react-bootstrap\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { fetchDetails } from \"../../../../actions/DetailsActions\"\r\nimport * as FaIcons from \"react-icons/fa\"\r\nimport { MDBDataTable } from \"mdbreact\"\r\nimport { CSVLink } from \"react-csv\"\r\nimport moment from \"moment\"\r\nimport * as BiIcons from \"react-icons/bi\"\r\nimport axios from \"axios\"\r\nimport { useAlert } from \"react-alert\"\r\n\r\nfunction ViewDetails() {\r\n  const dispatch = useDispatch()\r\n  const details = useSelector((state) => state.details)\r\n  const [searchInput, setSearchInput] = useState(null)\r\n  const [searchResult, setSearchResult] = useState(null)\r\n  const [rowData, setRowData] = useState([])\r\n  const [csvdata, setCsvdata] = useState([])\r\n  const alert = useAlert()\r\n  const [selectedDetail, setSelectedDetail] = useState(null)\r\n\r\n  const [detailToUpdate, setdetailToUpdate] = useState({\r\n    detail_customer: \"\",\r\n    po_number: \"\",\r\n    total_sack: \"\",\r\n    description: \"\",\r\n    color: \"\",\r\n    size: \"\",\r\n    total: \"\",\r\n    qty_sack: \"\",\r\n    ship_date: \"\",\r\n    detail_style: \"\",\r\n  })\r\n\r\n  //modal\r\n  const [show, setShow] = useState(false)\r\n\r\n  const handleClose = () => setShow(false)\r\n  const handleShow = () => setShow(true)\r\n  //modal\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault()\r\n    console.log(detailToUpdate)\r\n    const updateURL =\r\n      window.location.protocol +\r\n      \"//\" +\r\n      window.location.hostname +\r\n      \":8000/api/detail-update/\" +\r\n      selectedDetail[0].id\r\n\r\n    try {\r\n      await axios\r\n        .post(updateURL, detailToUpdate, {\r\n          data: null,\r\n          headers: {\r\n            Authorization:\r\n              \"token \" +\r\n              JSON.parse(window.localStorage.getItem(\"credentials\")).token,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          console.log(res)\r\n          if (res.status == 201) {\r\n            alert.show(\r\n              <div className=\"alert-suc\">\r\n                <FaIcons.FaCheck /> {res.data}\r\n              </div>\r\n            )\r\n            dispatch(fetchDetails())\r\n            handleClose()\r\n          } else {\r\n            alert.show(\r\n              <div className=\"alert-err\">\r\n                <BiIcons.BiError /> {res.data}\r\n              </div>\r\n            )\r\n          }\r\n        })\r\n    } catch (error) {\r\n      console.log(error)\r\n      alert.show(\r\n        <div className=\"alert-err\">\r\n          <BiIcons.BiError /> Error! Try Again.\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    let qtySack = document.getElementById(\"qty_sack\")\r\n    let totalSack = document.getElementById(\"total_sack\")\r\n    let total = document.getElementById(\"total\")\r\n    if (total.value !== \"\" && qtySack.value !== \"\") {\r\n      if (total.value % qtySack.value !== 0) {\r\n        totalSack.value = Math.trunc(total.value / qtySack.value) + 1\r\n      } else {\r\n        totalSack.value = total.value / qtySack.value\r\n      }\r\n    }\r\n    setdetailToUpdate({\r\n      ...detailToUpdate,\r\n      [e.target.id]: e.target.value.toUpperCase(),\r\n    })\r\n  }\r\n\r\n  const handleEdit = (id) => {\r\n    const selDetail = details.filter((it) => {\r\n      return it.id === id\r\n    })\r\n    setSelectedDetail(selDetail)\r\n    console.log(selDetail)\r\n    handleShow()\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (selectedDetail && selectedDetail.length) {\r\n      console.log(selectedDetail[0].id)\r\n      let { active, unique_field, id, create_on, ...y } = selectedDetail[0]\r\n      setdetailToUpdate({\r\n        ...detailToUpdate,\r\n        ...y,\r\n        detail_customer: selectedDetail[0].detail_customer,\r\n        detail_style: selectedDetail[0].detail_style.style,\r\n      })\r\n    }\r\n  }, [selectedDetail])\r\n\r\n  useEffect(() => {\r\n    console.log(detailToUpdate)\r\n  }, [detailToUpdate])\r\n\r\n  const handleDelete = async (id) => {\r\n    console.log(id)\r\n    const deleturl =\r\n      window.location.protocol +\r\n      \"//\" +\r\n      window.location.hostname +\r\n      \":8000/api/detail-delete/\" +\r\n      id\r\n    try {\r\n      await axios\r\n        .delete(deleturl, {\r\n          data: null,\r\n          headers: {\r\n            Authorization:\r\n              \"token \" +\r\n              JSON.parse(window.localStorage.getItem(\"credentials\")).token,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          console.log(res)\r\n          if (res.status == 201) {\r\n            alert.show(\r\n              <div className=\"alert-suc\">\r\n                <FaIcons.FaCheck /> {res.data}\r\n              </div>\r\n            )\r\n            dispatch(fetchDetails())\r\n          } else {\r\n            alert.show(\r\n              <div className=\"alert-err\">\r\n                <BiIcons.BiError /> {res.data}\r\n              </div>\r\n            )\r\n          }\r\n        })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchDetails())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log(details)\r\n    if (details.length && details[0].create_on) {\r\n      const data = details.map((i) => {\r\n        return {\r\n          date: moment(i.create_on).format(\"YYYY-MM-DD HH:MM\"),\r\n          customer: i.detail_customer.toUpperCase(),\r\n          style: i.detail_style.style,\r\n          po: i.po_number.toUpperCase(),\r\n          shipdate: i.ship_date.toUpperCase(),\r\n          color: i.color.toUpperCase(),\r\n          size: i.size.toUpperCase(),\r\n          total: i.total,\r\n          totalsack: i.total_sack,\r\n          action: (\r\n            <Row>\r\n              <Col sm={1}></Col>\r\n              <Col sm={5}>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  size=\"sm\"\r\n                  onClick={() => handleDelete(i.id)}\r\n                  block\r\n                >\r\n                  <FaIcons.FaTrashAlt /> Delete\r\n                </Button>\r\n              </Col>\r\n              <Col sm={5}>\r\n                <Button\r\n                  variant=\"info\"\r\n                  size=\"sm\"\r\n                  onClick={() => handleEdit(i.id)}\r\n                  block\r\n                >\r\n                  <FaIcons.FaEdit /> Edit\r\n                </Button>\r\n              </Col>\r\n              <Col sm={1}></Col>\r\n            </Row>\r\n          ),\r\n        }\r\n      })\r\n      console.log(data)\r\n      setRowData(data)\r\n      let csvd = details.map((i) => {\r\n        return [\r\n          moment(i.create_on).format(\"YYYY-MM-DD HH:MM\"),\r\n          i.detail_customer.toUpperCase(),\r\n          i.detail_style.style,\r\n          i.po_number.toUpperCase(),\r\n          i.ship_date.toUpperCase(),\r\n          i.color.toUpperCase(),\r\n          i.size.toUpperCase(),\r\n          i.total,\r\n          i.total_sack,\r\n        ]\r\n      })\r\n      csvd.unshift([\r\n        \"date\",\r\n        \"customer\",\r\n        \"style\",\r\n        \"po#\",\r\n        \"shipdate\",\r\n        \"color\",\r\n        \"size\",\r\n        \"total\",\r\n        \"totalSack\",\r\n      ])\r\n      console.log(csvd)\r\n      setCsvdata(csvd)\r\n    }\r\n  }, [details])\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Date\",\r\n        field: \"date\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Customer\",\r\n        field: \"customer\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Style\",\r\n        field: \"style\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"PO #\",\r\n        field: \"po\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Ship Date\",\r\n        field: \"shipdate\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Color\",\r\n        field: \"color\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Size\",\r\n        field: \"size\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Total\",\r\n        field: \"total\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Total sack\",\r\n        field: \"totalsack\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Actions\",\r\n        field: \"action\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n    ],\r\n    rows: rowData,\r\n  }\r\n\r\n  return (\r\n    <div className=\"view-item-wrapper\">\r\n      <div className=\"view-item-container\">\r\n        <Modal\r\n          show={show}\r\n          onHide={handleClose}\r\n          animation={false}\r\n          centered\r\n          size=\"lg\"\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"example-modal-sizes-title-md\">\r\n              <h6>Edit Item </h6>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            {/*  */}\r\n            <div className=\"modal-edit\">\r\n              <Form id=\"form-isr\">\r\n                <Form.Group as={Row} controlId=\"detail_customer\">\r\n                  <Col sm=\"4\">\r\n                    <Form.Label>Customer:</Form.Label>\r\n                  </Col>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      disabled\r\n                      className=\"form-caps\"\r\n                      value={\r\n                        selectedDetail\r\n                          ? selectedDetail[0].detail_customer\r\n                          : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"detail_style\">\r\n                  <Col sm=\"4\">\r\n                    <Form.Label>Style:</Form.Label>\r\n                  </Col>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      disabled\r\n                      className=\"form-caps\"\r\n                      value={\r\n                        selectedDetail\r\n                          ? selectedDetail[0].detail_style.style\r\n                          : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"po_number\">\r\n                  <Col sm=\"4\">\r\n                    <Form.Label>PO Number:</Form.Label>\r\n                  </Col>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      required\r\n                      type=\"text\"\r\n                      onChange={handleChange}\r\n                      className=\"form-caps\"\r\n                      defaultValue={\r\n                        selectedDetail ? selectedDetail[0].po_number : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"description\">\r\n                  <Col sm=\"4\">\r\n                    <Form.Label>Description:</Form.Label>\r\n                  </Col>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      required\r\n                      type=\"text\"\r\n                      onChange={handleChange}\r\n                      className=\"form-caps\"\r\n                      defaultValue={\r\n                        selectedDetail ? selectedDetail[0].description : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"color\">\r\n                  <Col sm=\"4\">\r\n                    <Form.Label>Color:</Form.Label>\r\n                  </Col>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      required\r\n                      type=\"text\"\r\n                      onChange={handleChange}\r\n                      className=\"form-caps\"\r\n                      defaultValue={\r\n                        selectedDetail ? selectedDetail[0].color : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"size\">\r\n                  <Col sm=\"4\">\r\n                    <Form.Label>Size:</Form.Label>\r\n                  </Col>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      required\r\n                      type=\"text\"\r\n                      onChange={handleChange}\r\n                      className=\"form-caps\"\r\n                      defaultValue={\r\n                        selectedDetail ? selectedDetail[0].size : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"total\">\r\n                  <Col sm=\"4\">\r\n                    <Form.Label>Total:</Form.Label>\r\n                  </Col>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      required\r\n                      type=\"number\"\r\n                      onChange={handleChange}\r\n                      className=\"form-caps\"\r\n                      defaultValue={\r\n                        selectedDetail ? selectedDetail[0].total : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"qty_sack\">\r\n                  <Col sm=\"4\">\r\n                    <Form.Label>Quantity / Sack:</Form.Label>\r\n                  </Col>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      required\r\n                      type=\"text\"\r\n                      onChange={handleChange}\r\n                      className=\"form-caps\"\r\n                      defaultValue={\r\n                        selectedDetail ? selectedDetail[0].qty_sack : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"total_sack\">\r\n                  <Col sm=\"4\">\r\n                    <Form.Label>Total Sack:</Form.Label>\r\n                  </Col>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      required\r\n                      type=\"text\"\r\n                      onChange={handleChange}\r\n                      className=\"form-caps\"\r\n                      defaultValue={\r\n                        selectedDetail ? selectedDetail[0].total_sack : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"ship_date\">\r\n                  <Col sm=\"4\">\r\n                    <Form.Label>Ship Date:</Form.Label>\r\n                  </Col>\r\n                  <Col sm=\"8\">\r\n                    <Form.Control\r\n                      required\r\n                      type=\"date\"\r\n                      onChange={handleChange}\r\n                      className=\"form-caps\"\r\n                      defaultValue={\r\n                        selectedDetail ? selectedDetail[0].ship_date : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n              </Form>\r\n            </div>\r\n            {/*  */}\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" size=\"sm\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" size=\"sm\" onClick={handleSubmit}>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h5 className=\"form-title\">PURCHASE ORDERS</h5>\r\n        </div>\r\n        <div\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            padding: \"20px\",\r\n            // borderRadius: '5px',\r\n            height: \"90%\",\r\n            overflow: \"scroll\",\r\n            overflowX: \"hidden\",\r\n            marginTop: \"20px\",\r\n          }}\r\n        >\r\n          <MDBDataTable\r\n            entries={8}\r\n            striped\r\n            bordered\r\n            small\r\n            entriesOptions={[5, 8, 10, 15]}\r\n            striped\r\n            hover\r\n            className=\"data-style\"\r\n            data={data}\r\n          />\r\n          {csvdata.length ? (\r\n            <CSVLink data={csvdata} filename={\"details_data.csv\"}>\r\n              Export CSV\r\n            </CSVLink>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ViewDetails\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashCard.js",["311","312"],"import React from \"react\"\r\nimport { Row, Col } from \"react-bootstrap\"\r\n\r\nfunction DashCard({ stylclass, icon, val, caption }) {\r\n  return (\r\n    <div className={stylclass}>\r\n      <div style={{ marginTop: \"10px\" }}>{icon}</div>\r\n\r\n      <div>\r\n        <span id=\"val-card\">{val}</span>\r\n        <span id=\"lbl-card\">{caption}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DashCard\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashPie.js",["313"],"D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashboardTodayTable.js",[],"D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashboardStatusMonitoring.js",["314","315","316","317","318"],"import React, { useState, useEffect } from \"react\"\r\nimport { Button, Col, Form, NavLink, Row, Table } from \"react-bootstrap\"\r\nimport { HorizontalBar, Doughnut } from \"react-chartjs-2\"\r\nimport moment from \"moment\"\r\nimport { CSVLink } from \"react-csv\"\r\n\r\nfunction DashboardStatusMonitoring({ statusTable }) {\r\n  const [toBeMapped, setToBeMapped] = useState([])\r\n  const [resultState, setResultState] = useState([])\r\n  const [uniqueResult, setUniqueResult] = useState([])\r\n\r\n  useEffect(() => {\r\n    console.log(toBeMapped)\r\n  }, [toBeMapped])\r\n\r\n  const dataCum = {\r\n    labels: toBeMapped.map((tbm) => tbm.process),\r\n    datasets: [\r\n      {\r\n        label: \"CUMULATIVE\",\r\n        data: toBeMapped.map((tbm) => {\r\n          return tbm.qtys.reduce((a, b) => a + b, 0)\r\n        }),\r\n        backgroundColor: [\r\n          \"#fec107\",\r\n          \"#fec107\",\r\n          \"#fec107\",\r\n          \"#fec107\",\r\n          \"#fec107\",\r\n          \"#fec107\",\r\n          \"#fec107\",\r\n          \"#fec107\",\r\n          \"#fec107\",\r\n          \"#fec107\",\r\n        ],\r\n      },\r\n    ],\r\n  }\r\n\r\n  const dataBal = {\r\n    labels: toBeMapped.map((tbm) => tbm.process),\r\n    datasets: [\r\n      {\r\n        label: \"BALANCE\",\r\n        data: toBeMapped.map((tbm) => {\r\n          return tbm.total - tbm.qtys.reduce((a, b) => a + b, 0)\r\n        }),\r\n        backgroundColor: [\r\n          \"#e04d57\",\r\n          \"#e04d57\",\r\n          \"#e04d57\",\r\n          \"#e04d57\",\r\n          \"#e04d57\",\r\n          \"#e04d57\",\r\n          \"#e04d57\",\r\n          \"#e04d57\",\r\n          \"#e04d57\",\r\n          \"#e04d57\",\r\n        ],\r\n      },\r\n    ],\r\n  }\r\n  let options = {\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          ticks: {\r\n            fontSize: 8,\r\n            min: 0,\r\n            max: 10000,\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            fontSize: 10,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    legend: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      display: true,\r\n      position: \"top\",\r\n      labels: {\r\n        fontColor: \"black\",\r\n      },\r\n    },\r\n  }\r\n\r\n  const dataDough = {\r\n    labels: [\"CUMULATIVE\", \"BALANCE\"],\r\n    datasets: [\r\n      {\r\n        label: \"Doughnut\",\r\n        data: [10, 20],\r\n        backgroundColor: [\"#fec107\", \"#e04d57\", \"#f83a02\"],\r\n      },\r\n    ],\r\n  }\r\n\r\n  let optionsDough = {\r\n    legend: {\r\n      display: true,\r\n      position: \"top\",\r\n      labels: {\r\n        fontColor: \"black\",\r\n      },\r\n    },\r\n  }\r\n\r\n  let optionsDoughmini = {\r\n    legend: {\r\n      display: true,\r\n      position: \"left\",\r\n      labels: {\r\n        fontColor: \"black\",\r\n      },\r\n    },\r\n  }\r\n\r\n  const [searchFormDetails, setSearchFormDetails] = useState({\r\n    customer: \"\",\r\n    from: \"\",\r\n    to: \"\",\r\n  })\r\n\r\n  const handleSearchForm = (e) => {\r\n    setSearchFormDetails({\r\n      ...searchFormDetails,\r\n      [e.target.id]: e.target.value.toUpperCase(),\r\n    })\r\n  }\r\n\r\n  const handleSubmitSearch = (e) => {\r\n    e.preventDefault()\r\n    const filteredST = statusTable.filter(\r\n      (st) =>\r\n        st.customer === searchFormDetails.customer &&\r\n        new Date(st.date) >= new Date(searchFormDetails.from) &&\r\n        new Date(st.date) <= new Date(searchFormDetails.to)\r\n    )\r\n\r\n    let codeList = filteredST.map((fst) => {\r\n      return {\r\n        code: fst.code,\r\n        date: fst.date,\r\n        unID: fst.code + \"*\" + fst.date,\r\n      }\r\n    })\r\n\r\n    /////normalizing data\r\n    let tempList = []\r\n    let tempData = []\r\n    codeList.forEach((cl) => {\r\n      if (!tempList.includes(cl.unID)) {\r\n        tempData.push(cl)\r\n        tempList.push(cl.unID)\r\n      }\r\n    })\r\n\r\n    let uniqueCodeList = tempData\r\n\r\n    let result = []\r\n\r\n    uniqueCodeList.forEach((ucl) => {\r\n      let resItem = {\r\n        code: \"\",\r\n        customer: \"\",\r\n        date: \"\",\r\n        total: \"\",\r\n        process: [],\r\n        qty: [],\r\n      }\r\n      filteredST.forEach((fst) => {\r\n        if (ucl.code === fst.code && ucl.date === fst.date) {\r\n          resItem.code = fst.code\r\n          resItem.customer = fst.customer\r\n          resItem.date = fst.date\r\n          resItem.total = fst.total\r\n          resItem.process.push(fst.process)\r\n          resItem.qty.push(fst.qty)\r\n        }\r\n      })\r\n      result.push(resItem)\r\n    })\r\n\r\n    setResultState(result)\r\n\r\n    let tempUnique = []\r\n    let uResult = []\r\n    result.forEach((cl) => {\r\n      if (!tempUnique.includes(cl.code)) {\r\n        uResult.push(cl)\r\n        tempUnique.push(cl.code)\r\n      }\r\n    })\r\n\r\n    setUniqueResult(uResult)\r\n  }\r\n\r\n  const handleViewdetails = (code, total) => {\r\n    let filteredResult = resultState.filter((c) => c.code === code)\r\n    let toBemapped = []\r\n\r\n    processList.forEach((pl) => {\r\n      let dates = []\r\n      let qtys = []\r\n      let pro = null\r\n\r\n      filteredResult.forEach((fr) => {\r\n        if (fr.process.includes(pl)) {\r\n          pro = pl\r\n          dates.push(fr.date)\r\n          qtys.push(fr.qty[fr.process.indexOf(pl)])\r\n        }\r\n      })\r\n      toBemapped.push({\r\n        process: pro,\r\n        dates: dates,\r\n        qtys: qtys,\r\n        total: total,\r\n        cum: qtys.reduce((a, b) => a + b, 0),\r\n        bal: total - qtys.reduce((a, b) => a + b, 0),\r\n        code: code,\r\n      })\r\n    })\r\n\r\n    toBemapped = toBemapped.filter((tb) => tb.process !== null)\r\n    setToBeMapped(toBemapped)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (toBeMapped.length != 0) {\r\n      var detailView = document.getElementById(\"detail-view\")\r\n      detailView.scrollIntoView({\r\n        behavior: \"smooth\",\r\n      })\r\n      detailView.scrollIntoView({\r\n        behavior: \"smooth\",\r\n      })\r\n    }\r\n  }, [toBeMapped])\r\n\r\n  const processList = [\r\n    \"knitting\",\r\n    \"cutting\",\r\n    \"sewing\",\r\n    \"steaming\",\r\n    \"examining\",\r\n    \"boxing\",\r\n  ]\r\n  return (\r\n    <div>\r\n      <h4>Process Status Monitoring</h4>\r\n      <br />\r\n\r\n      <Row>\r\n        <Col lg={12}>\r\n          <Form onSubmit={handleSubmitSearch} className=\"form-caps\">\r\n            <Row>\r\n              <Col lg={4}>\r\n                <Form.Group controlId=\"customer\">\r\n                  <Form.Label>Customer:</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    type=\"text\"\r\n                    onChange={handleSearchForm}\r\n                    className=\"form-caps\"\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n              <Col lg={4}>\r\n                <Form.Group controlId=\"from\">\r\n                  <Form.Label>From:</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    type=\"date\"\r\n                    onChange={handleSearchForm}\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n              <Col lg={4}>\r\n                <Form.Group controlId=\"to\">\r\n                  <Form.Label>to:</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    type=\"date\"\r\n                    min={\r\n                      searchFormDetails\r\n                        ? moment(searchFormDetails.from)\r\n                            .add(1, \"days\")\r\n                            .format(\"YYYY-MM-DD\")\r\n                        : false\r\n                    }\r\n                    max={\r\n                      searchFormDetails\r\n                        ? moment(searchFormDetails.from)\r\n                            .add(5, \"days\")\r\n                            .format(\"YYYY-MM-DD\")\r\n                        : false\r\n                    }\r\n                    onChange={handleSearchForm}\r\n                  />\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form.Group controlId=\"from\">\r\n                  <Button type=\"submit\" variant=\"info\" block>\r\n                    Search\r\n                  </Button>\r\n                </Form.Group>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n          <br />\r\n          <Table\r\n            striped\r\n            bordered\r\n            hover\r\n            className=\"table-weekly-dash\"\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              borderRadius: \"10px\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <thead>\r\n              <tr>\r\n                <th>CUSTOMER</th>\r\n                <th>STYLE</th>\r\n                <th>PO#</th>\r\n                <th>COLOR</th>\r\n                <th>SIZE</th>\r\n                <th>TOTAL</th>\r\n                <th>ACTIONS</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {uniqueResult.length ? (\r\n                uniqueResult.map((fr, index) => {\r\n                  if (fr)\r\n                    return (\r\n                      <tr style={{ fontSize: \"15px\" }} key={index}>\r\n                        <td>{fr.customer}</td>\r\n                        <td>{fr.code.split(\"-\")[0]}</td>\r\n                        <td>{fr.code.split(\"-\")[1]}</td>\r\n                        <td>{fr.code.split(\"-\")[2]}</td>\r\n                        <td>{fr.code.split(\"-\")[2].split(\"$\")[1]}</td>\r\n                        <td>{fr.total}</td>\r\n                        <td>\r\n                          <Button\r\n                            variant=\"info\"\r\n                            onClick={() => {\r\n                              handleViewdetails(fr.code, fr.total)\r\n                            }}\r\n                          >\r\n                            View Details\r\n                          </Button>\r\n                        </td>\r\n                      </tr>\r\n                    )\r\n                })\r\n              ) : (\r\n                <p>No Results</p>\r\n              )}\r\n            </tbody>\r\n          </Table>\r\n        </Col>\r\n      </Row>\r\n      <div id=\"detail-view\"></div>\r\n\r\n      <br />\r\n\r\n      {/* start table per process */}\r\n      {toBeMapped.length ? (\r\n        <>\r\n          <h5>Summary</h5>\r\n\r\n          {toBeMapped.map((tb, index) => {\r\n            return (\r\n              <div key={index}>\r\n                {index === 0 ? (\r\n                  <>\r\n                    <div className=\"detail-detail-dash\">\r\n                      <div>\r\n                        <p>\r\n                          STYLE : <span>{tb.code.split(\"-\")[0]}</span>\r\n                        </p>\r\n                      </div>\r\n                      <div>\r\n                        <p>\r\n                          PO# : <span>{tb.code.split(\"-\")[1]}</span>\r\n                        </p>\r\n                      </div>\r\n                      <div>\r\n                        <p>\r\n                          STYLE :{\" \"}\r\n                          <span>{tb.code.split(\"-\")[2].split(\"$\")[0]}</span>\r\n                        </p>\r\n                      </div>\r\n                      <div>\r\n                        <p>\r\n                          STYLE :{\" \"}\r\n                          <span>{tb.code.split(\"-\")[2].split(\"$\")[1]}</span>\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <Row>\r\n                      {/* <Col lg={1}></Col> */}\r\n                      <Col lg={5}>\r\n                        <div className=\"dash-status-chart-div\">\r\n                          <HorizontalBar data={dataCum} options={options} />\r\n                        </div>\r\n                      </Col>\r\n                      <Col lg={5}>\r\n                        <div className=\"dash-status-chart-div\">\r\n                          <HorizontalBar data={dataBal} options={options} />\r\n                        </div>\r\n                        {/* <Doughnut data={dataDough} options={optionsDough} /> */}\r\n                      </Col>\r\n                      <Col lg={1}></Col>\r\n                    </Row>\r\n                    <br />\r\n                    <br />\r\n                    <br />\r\n                  </>\r\n                ) : null}\r\n                <Row className=\"table-process-dash-wrapper\">\r\n                  <Col lg={8}>\r\n                    <div className=\"table-process-dash\">\r\n                      <div className=\"process-name\">\r\n                        <h5>{tb.process.toUpperCase()}</h5>\r\n                      </div>\r\n\r\n                      <Table striped bordered hover>\r\n                        <thead>\r\n                          <tr>\r\n                            {tb.dates.map((tbd, index) => {\r\n                              return <th key={index}>{tbd}</th>\r\n                            })}\r\n                            <th>CUM</th>\r\n                            <th>BAL</th>\r\n                          </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                          <tr>\r\n                            {tb.qtys.map((tbq, index) => {\r\n                              return <th key={index}>{tbq}</th>\r\n                            })}\r\n                            <td>{tb.qtys.reduce((a, b) => a + b, 0)}</td>\r\n                            <td>\r\n                              {tb.total - tb.qtys.reduce((a, b) => a + b, 0)}\r\n                            </td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </Table>\r\n                    </div>\r\n                  </Col>\r\n                  <Col lg={4}>\r\n                    <div\r\n                      style={{\r\n                        width: \"300px\",\r\n                        paddingLeft: \"20px\",\r\n                      }}\r\n                    >\r\n                      <Doughnut\r\n                        data={{\r\n                          labels: [\"CUMULATIVE\", \"BALANCE\"],\r\n                          datasets: [\r\n                            {\r\n                              label: \"Doughnut\",\r\n                              data: [\r\n                                tb.qtys.reduce((a, b) => a + b, 0),\r\n                                tb.total - tb.qtys.reduce((a, b) => a + b, 0),\r\n                              ],\r\n                              backgroundColor: [\r\n                                \"#fec107\",\r\n                                \"#e04d57\",\r\n                                \"#f83a02\",\r\n                              ],\r\n                            },\r\n                          ],\r\n                        }}\r\n                        options={optionsDoughmini}\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <hr />\r\n              </div>\r\n            )\r\n          })}\r\n        </>\r\n      ) : null}\r\n\r\n      {/* end table per process */}\r\n      {toBeMapped.length ? (\r\n        <Row>\r\n          <Col>\r\n            <CSVLink data={toBeMapped} filename={\"CUMULATIVE-BALANCE.csv\"}>\r\n              Export CSV\r\n            </CSVLink>\r\n          </Col>\r\n        </Row>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DashboardStatusMonitoring\r\n","D:\\PROJECTS\\frontgold\\src\\reducers\\StatusTableReducer.js",["319"],"export default (statusTable = [], action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_STATUS_TABLE\":\r\n      return action.payload\r\n    default:\r\n      return statusTable\r\n  }\r\n}\r\n","D:\\PROJECTS\\frontgold\\src\\reducers\\StatusListReducer.js",["320"],"export default (statusList = [], action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_STATUS_LIST\":\r\n      return action.payload\r\n    default:\r\n      return statusList\r\n  }\r\n}\r\n","D:\\PROJECTS\\frontgold\\src\\reducers\\RouteTableReducer.js",["321"],"export default (routeTable = [], action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_ROUTE_TABLE\":\r\n      return action.payload\r\n    default:\r\n      return routeTable\r\n  }\r\n}\r\n","D:\\PROJECTS\\frontgold\\src\\actions\\StatusActions.js",[],"D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashRoutes.js",["322","323"],"import React, { useEffect, useState } from \"react\"\r\nimport { MDBDataTable } from \"mdbreact\"\r\nimport { getRouteTable } from \"../../../actions/StatusActions\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nfunction DashRoutes() {\r\n  const dispatch = useDispatch()\r\n\r\n  const [routeTabes, setrouteTabes] = useState([])\r\n  const routeTable = useSelector((state) => state.routeTable)\r\n  const [keyList, setKeyList] = useState([])\r\n\r\n  useEffect(() => {\r\n    dispatch(getRouteTable())\r\n  }, [])\r\n  useEffect(() => {\r\n    setrouteTabes(routeTable)\r\n  }, [routeTable])\r\n\r\n  useEffect(() => {\r\n    console.log(routeTabes)\r\n    if (routeTabes.length) {\r\n      let keylist = []\r\n\r\n      Object.keys(routeTabes[0]).forEach((rt) => {\r\n        keylist.push({\r\n          label: rt,\r\n          field: rt,\r\n          sort: \"asc\",\r\n        })\r\n      })\r\n\r\n      setKeyList(keylist)\r\n\r\n      console.log(keylist)\r\n    }\r\n  }, [routeTabes])\r\n  const data = {\r\n    columns: keyList,\r\n    rows: routeTabes,\r\n  }\r\n  return (\r\n    <>\r\n      <h4>Routing Info</h4>\r\n      <div className=\"route-wrapper\">\r\n        <div className=\"route-container\">\r\n          <MDBDataTable\r\n            entries={8}\r\n            striped\r\n            bordered\r\n            small\r\n            entriesOptions={[5, 8, 10, 15]}\r\n            striped\r\n            hover\r\n            className=\"data-style-route\"\r\n            data={data}\r\n            sortable={true}\r\n            // exportToCSV\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DashRoutes\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\users\\RouteInfo.js",["324","325"],"import React, { useEffect, useState } from \"react\"\r\nimport { MDBDataTable } from \"mdbreact\"\r\nimport { getRouteTable } from \"../../../actions/StatusActions\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\n\r\nfunction RouteInfo() {\r\n  const dispatch = useDispatch()\r\n\r\n  const [routeTabes, setrouteTabes] = useState([])\r\n  const routeTable = useSelector((state) => state.routeTable)\r\n  const [keyList, setKeyList] = useState([])\r\n\r\n  useEffect(() => {\r\n    dispatch(getRouteTable())\r\n  }, [])\r\n  useEffect(() => {\r\n    setrouteTabes(routeTable)\r\n  }, [routeTable])\r\n\r\n  useEffect(() => {\r\n    console.log(routeTabes)\r\n    if (routeTabes.length) {\r\n      let keylist = []\r\n\r\n      Object.keys(routeTabes[0]).forEach((rt) => {\r\n        keylist.push({\r\n          label: rt,\r\n          field: rt,\r\n          sort: \"asc\",\r\n        })\r\n      })\r\n\r\n      setKeyList(keylist)\r\n\r\n      console.log(keylist)\r\n    }\r\n  }, [routeTabes])\r\n  const data = {\r\n    columns: keyList,\r\n    rows: routeTabes,\r\n  }\r\n  return (\r\n    <div className=\"view-item-wrapper\">\r\n      <div className=\"view-item-container\">\r\n        <div style={{ width: \"100%\", color: \"white\", textAlign: \"center\" }}>\r\n          <h5>Routing Info</h5>\r\n        </div>\r\n\r\n        <div className=\"route-info\">\r\n          <MDBDataTable\r\n            entries={8}\r\n            striped\r\n            bordered\r\n            small\r\n            entriesOptions={[5, 8, 10, 15]}\r\n            striped\r\n            hover\r\n            className=\"data-style-route\"\r\n            data={data}\r\n            sortable={true}\r\n            // exportToCSV\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RouteInfo\r\n","D:\\PROJECTS\\frontgold\\src\\components\\pages\\dashboard\\DashShipment.js",["326","327"],"import React, { useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { getShipmentTable } from \"../../../actions/StatusActions\"\r\nimport { MDBDataTable } from \"mdbreact\"\r\nfunction DashShipment() {\r\n  const dispatch = useDispatch()\r\n  const shipmentTable = useSelector((state) => state.shipmentTable)\r\n  const [shipmentData, setShipmentData] = useState([])\r\n  useEffect(() => {\r\n    dispatch(getShipmentTable())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log(shipmentTable)\r\n    if (shipmentTable && shipmentTable.length) {\r\n      const shipm = shipmentTable.map((i) => {\r\n        return {\r\n          barcode: i.barcode,\r\n          status: i.active ? \"Pending\" : \"Finished\",\r\n          Days_left: i.Days_left,\r\n        }\r\n      })\r\n\r\n      setShipmentData(shipm)\r\n    }\r\n  }, [shipmentTable])\r\n\r\n  useEffect(() => {\r\n    console.log(shipmentData)\r\n  }, [shipmentData])\r\n\r\n  const data = {\r\n    columns: [\r\n      {\r\n        label: \"Order\",\r\n        field: \"barcode\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Status\",\r\n        field: \"status\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n      {\r\n        label: \"Days Left\",\r\n        field: \"Days_left\",\r\n        sort: \"asc\",\r\n        width: 150,\r\n      },\r\n    ],\r\n    rows: shipmentData,\r\n  }\r\n  return (\r\n    <div>\r\n      <h4>Shipment</h4>\r\n      <div className=\"route-wrapper\">\r\n        <div className=\"route-container\">\r\n          <MDBDataTable\r\n            entries={8}\r\n            striped\r\n            bordered\r\n            small\r\n            entriesOptions={[5, 8, 10, 15]}\r\n            striped\r\n            hover\r\n            className=\"data-style-route\"\r\n            data={data}\r\n            sortable={true}\r\n            // exportToCSV\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DashShipment\r\n","D:\\PROJECTS\\frontgold\\src\\reducers\\ShipmentReducer.js",["328"],"export default (shipmentTable = [], action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_SHIPMENT_TABLE\":\r\n      return action.payload\r\n    default:\r\n      return shipmentTable\r\n  }\r\n}\r\n",{"ruleId":"329","severity":1,"message":"330","line":16,"column":3,"nodeType":"331","messageId":"332","endLine":16,"endColumn":12},{"ruleId":"329","severity":1,"message":"333","line":17,"column":3,"nodeType":"331","messageId":"332","endLine":17,"endColumn":8},{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","replacedBy":"337"},{"ruleId":"329","severity":1,"message":"338","line":2,"column":10,"nodeType":"331","messageId":"332","endLine":2,"endColumn":16},{"ruleId":"329","severity":1,"message":"339","line":12,"column":10,"nodeType":"331","messageId":"332","endLine":12,"endColumn":17},{"ruleId":"329","severity":1,"message":"340","line":13,"column":10,"nodeType":"331","messageId":"332","endLine":13,"endColumn":18},{"ruleId":"329","severity":1,"message":"341","line":13,"column":20,"nodeType":"331","messageId":"332","endLine":13,"endColumn":31},{"ruleId":"329","severity":1,"message":"342","line":16,"column":18,"nodeType":"331","messageId":"332","endLine":16,"endColumn":27},{"ruleId":"329","severity":1,"message":"343","line":8,"column":10,"nodeType":"331","messageId":"332","endLine":8,"endColumn":29},{"ruleId":"344","severity":1,"message":"345","line":64,"column":52,"nodeType":"346","messageId":"347","endLine":64,"endColumn":54},{"ruleId":"329","severity":1,"message":"348","line":3,"column":13,"nodeType":"331","messageId":"332","endLine":3,"endColumn":20},{"ruleId":"329","severity":1,"message":"349","line":6,"column":8,"nodeType":"331","messageId":"332","endLine":6,"endColumn":12},{"ruleId":"329","severity":1,"message":"350","line":10,"column":8,"nodeType":"331","messageId":"332","endLine":10,"endColumn":14},{"ruleId":"329","severity":1,"message":"351","line":14,"column":8,"nodeType":"331","messageId":"332","endLine":14,"endColumn":18},{"ruleId":"329","severity":1,"message":"352","line":13,"column":3,"nodeType":"331","messageId":"332","endLine":13,"endColumn":16},{"ruleId":"329","severity":1,"message":"353","line":38,"column":10,"nodeType":"331","messageId":"332","endLine":38,"endColumn":20},{"ruleId":"329","severity":1,"message":"354","line":38,"column":22,"nodeType":"331","messageId":"332","endLine":38,"endColumn":35},{"ruleId":"355","severity":1,"message":"356","line":60,"column":6,"nodeType":"357","endLine":60,"endColumn":8,"suggestions":"358"},{"ruleId":"355","severity":1,"message":"359","line":123,"column":6,"nodeType":"357","endLine":123,"endColumn":19,"suggestions":"360"},{"ruleId":"329","severity":1,"message":"361","line":1,"column":27,"nodeType":"331","messageId":"332","endLine":1,"endColumn":36},{"ruleId":"344","severity":1,"message":"345","line":28,"column":39,"nodeType":"346","messageId":"347","endLine":28,"endColumn":41},{"ruleId":"329","severity":1,"message":"362","line":2,"column":16,"nodeType":"331","messageId":"332","endLine":2,"endColumn":25},{"ruleId":"329","severity":1,"message":"338","line":2,"column":20,"nodeType":"331","messageId":"332","endLine":2,"endColumn":26},{"ruleId":"355","severity":1,"message":"363","line":52,"column":6,"nodeType":"357","endLine":52,"endColumn":31,"suggestions":"364"},{"ruleId":"329","severity":1,"message":"365","line":54,"column":9,"nodeType":"331","messageId":"332","endLine":54,"endColumn":20},{"ruleId":"355","severity":1,"message":"366","line":32,"column":6,"nodeType":"357","endLine":32,"endColumn":12,"suggestions":"367"},{"ruleId":"355","severity":1,"message":"356","line":36,"column":6,"nodeType":"357","endLine":36,"endColumn":8,"suggestions":"368"},{"ruleId":"329","severity":1,"message":"369","line":3,"column":10,"nodeType":"331","messageId":"332","endLine":3,"endColumn":20},{"ruleId":"355","severity":1,"message":"356","line":31,"column":8,"nodeType":"357","endLine":31,"endColumn":10,"suggestions":"370"},{"ruleId":"355","severity":1,"message":"371","line":57,"column":8,"nodeType":"357","endLine":57,"endColumn":17,"suggestions":"372"},{"ruleId":"344","severity":1,"message":"345","line":99,"column":68,"nodeType":"346","messageId":"347","endLine":99,"endColumn":70},{"ruleId":"373","severity":1,"message":"374","line":1,"column":1,"nodeType":"375","endLine":10,"endColumn":2},{"ruleId":"373","severity":1,"message":"374","line":1,"column":1,"nodeType":"375","endLine":10,"endColumn":2},{"ruleId":"373","severity":1,"message":"374","line":1,"column":1,"nodeType":"375","endLine":18,"endColumn":2},{"ruleId":"355","severity":1,"message":"356","line":32,"column":6,"nodeType":"357","endLine":32,"endColumn":8,"suggestions":"376"},{"ruleId":"329","severity":1,"message":"377","line":3,"column":3,"nodeType":"331","messageId":"332","endLine":3,"endColumn":8},{"ruleId":"329","severity":1,"message":"338","line":6,"column":3,"nodeType":"331","messageId":"332","endLine":6,"endColumn":9},{"ruleId":"329","severity":1,"message":"378","line":7,"column":3,"nodeType":"331","messageId":"332","endLine":7,"endColumn":7},{"ruleId":"329","severity":1,"message":"379","line":8,"column":3,"nodeType":"331","messageId":"332","endLine":8,"endColumn":7},{"ruleId":"329","severity":1,"message":"380","line":9,"column":3,"nodeType":"331","messageId":"332","endLine":9,"endColumn":14},{"ruleId":"355","severity":1,"message":"356","line":31,"column":6,"nodeType":"357","endLine":31,"endColumn":18,"suggestions":"381"},{"ruleId":"355","severity":1,"message":"382","line":62,"column":6,"nodeType":"357","endLine":62,"endColumn":19,"suggestions":"383"},{"ruleId":"329","severity":1,"message":"361","line":1,"column":17,"nodeType":"331","messageId":"332","endLine":1,"endColumn":26},{"ruleId":"329","severity":1,"message":"384","line":2,"column":31,"nodeType":"331","messageId":"332","endLine":2,"endColumn":36},{"ruleId":"329","severity":1,"message":"385","line":2,"column":38,"nodeType":"331","messageId":"332","endLine":2,"endColumn":41},{"ruleId":"329","severity":1,"message":"386","line":2,"column":43,"nodeType":"331","messageId":"332","endLine":2,"endColumn":46},{"ruleId":"387","severity":1,"message":"388","line":55,"column":55,"nodeType":"389","messageId":"390","endLine":55,"endColumn":56},{"ruleId":"329","severity":1,"message":"385","line":3,"column":10,"nodeType":"331","messageId":"332","endLine":3,"endColumn":13},{"ruleId":"329","severity":1,"message":"362","line":2,"column":15,"nodeType":"331","messageId":"332","endLine":2,"endColumn":24},{"ruleId":"391","severity":1,"message":"392","line":39,"column":57,"nodeType":"389","messageId":"393","endLine":39,"endColumn":59},{"ruleId":"344","severity":1,"message":"345","line":76,"column":54,"nodeType":"346","messageId":"347","endLine":76,"endColumn":56},{"ruleId":"329","severity":1,"message":"394","line":4,"column":8,"nodeType":"331","messageId":"332","endLine":4,"endColumn":14},{"ruleId":"355","severity":1,"message":"395","line":104,"column":6,"nodeType":"357","endLine":104,"endColumn":8,"suggestions":"396"},{"ruleId":"355","severity":1,"message":"397","line":106,"column":13,"nodeType":"346","endLine":116,"endColumn":4},{"ruleId":"391","severity":1,"message":"398","line":122,"column":27,"nodeType":"389","messageId":"393","endLine":122,"endColumn":29},{"ruleId":"391","severity":1,"message":"398","line":124,"column":29,"nodeType":"389","messageId":"393","endLine":124,"endColumn":31},{"ruleId":"355","severity":1,"message":"399","line":43,"column":6,"nodeType":"357","endLine":43,"endColumn":12,"suggestions":"400"},{"ruleId":"373","severity":1,"message":"374","line":1,"column":1,"nodeType":"375","endLine":15,"endColumn":2},{"ruleId":"329","severity":1,"message":"362","line":2,"column":10,"nodeType":"331","messageId":"332","endLine":2,"endColumn":19},{"ruleId":"329","severity":1,"message":"377","line":2,"column":21,"nodeType":"331","messageId":"332","endLine":2,"endColumn":26},{"ruleId":"329","severity":1,"message":"378","line":2,"column":28,"nodeType":"331","messageId":"332","endLine":2,"endColumn":32},{"ruleId":"329","severity":1,"message":"338","line":2,"column":34,"nodeType":"331","messageId":"332","endLine":2,"endColumn":40},{"ruleId":"329","severity":1,"message":"401","line":2,"column":42,"nodeType":"331","messageId":"332","endLine":2,"endColumn":47},{"ruleId":"329","severity":1,"message":"402","line":5,"column":13,"nodeType":"331","messageId":"332","endLine":5,"endColumn":20},{"ruleId":"329","severity":1,"message":"403","line":17,"column":9,"nodeType":"331","messageId":"332","endLine":17,"endColumn":20},{"ruleId":"329","severity":1,"message":"404","line":19,"column":10,"nodeType":"331","messageId":"332","endLine":19,"endColumn":21},{"ruleId":"329","severity":1,"message":"405","line":19,"column":23,"nodeType":"331","messageId":"332","endLine":19,"endColumn":37},{"ruleId":"329","severity":1,"message":"406","line":20,"column":10,"nodeType":"331","messageId":"332","endLine":20,"endColumn":22},{"ruleId":"329","severity":1,"message":"407","line":20,"column":24,"nodeType":"331","messageId":"332","endLine":20,"endColumn":39},{"ruleId":"355","severity":1,"message":"356","line":73,"column":6,"nodeType":"357","endLine":73,"endColumn":8,"suggestions":"408"},{"ruleId":"329","severity":1,"message":"409","line":125,"column":9,"nodeType":"331","messageId":"332","endLine":125,"endColumn":25},{"ruleId":"329","severity":1,"message":"410","line":132,"column":9,"nodeType":"331","messageId":"332","endLine":132,"endColumn":21},{"ruleId":"329","severity":1,"message":"411","line":146,"column":9,"nodeType":"331","messageId":"332","endLine":146,"endColumn":19},{"ruleId":"391","severity":1,"message":"398","line":167,"column":27,"nodeType":"389","messageId":"393","endLine":167,"endColumn":29},{"ruleId":"391","severity":1,"message":"398","line":168,"column":29,"nodeType":"389","messageId":"393","endLine":168,"endColumn":31},{"ruleId":"355","severity":1,"message":"412","line":179,"column":6,"nodeType":"357","endLine":179,"endColumn":12,"suggestions":"413"},{"ruleId":"414","severity":1,"message":"415","line":413,"column":13,"nodeType":"416","endLine":413,"endColumn":20},{"ruleId":"329","severity":1,"message":"338","line":2,"column":10,"nodeType":"331","messageId":"332","endLine":2,"endColumn":16},{"ruleId":"329","severity":1,"message":"377","line":2,"column":18,"nodeType":"331","messageId":"332","endLine":2,"endColumn":23},{"ruleId":"329","severity":1,"message":"378","line":2,"column":25,"nodeType":"331","messageId":"332","endLine":2,"endColumn":29},{"ruleId":"355","severity":1,"message":"356","line":17,"column":6,"nodeType":"357","endLine":17,"endColumn":8,"suggestions":"417"},{"ruleId":"355","severity":1,"message":"418","line":81,"column":6,"nodeType":"357","endLine":81,"endColumn":25,"suggestions":"419"},{"ruleId":"414","severity":1,"message":"415","line":175,"column":13,"nodeType":"416","endLine":175,"endColumn":20},{"ruleId":"329","severity":1,"message":"404","line":16,"column":10,"nodeType":"331","messageId":"332","endLine":16,"endColumn":21},{"ruleId":"329","severity":1,"message":"405","line":16,"column":23,"nodeType":"331","messageId":"332","endLine":16,"endColumn":37},{"ruleId":"329","severity":1,"message":"406","line":17,"column":10,"nodeType":"331","messageId":"332","endLine":17,"endColumn":22},{"ruleId":"329","severity":1,"message":"407","line":17,"column":24,"nodeType":"331","messageId":"332","endLine":17,"endColumn":39},{"ruleId":"391","severity":1,"message":"392","line":65,"column":26,"nodeType":"389","messageId":"393","endLine":65,"endColumn":28},{"ruleId":"355","severity":1,"message":"420","line":128,"column":6,"nodeType":"357","endLine":128,"endColumn":22,"suggestions":"421"},{"ruleId":"391","severity":1,"message":"392","line":154,"column":26,"nodeType":"389","messageId":"393","endLine":154,"endColumn":28},{"ruleId":"355","severity":1,"message":"356","line":176,"column":6,"nodeType":"357","endLine":176,"endColumn":8,"suggestions":"422"},{"ruleId":"355","severity":1,"message":"423","line":249,"column":6,"nodeType":"357","endLine":249,"endColumn":15,"suggestions":"424"},{"ruleId":"414","severity":1,"message":"415","line":529,"column":13,"nodeType":"416","endLine":529,"endColumn":20},{"ruleId":"329","severity":1,"message":"385","line":2,"column":10,"nodeType":"331","messageId":"332","endLine":2,"endColumn":13},{"ruleId":"329","severity":1,"message":"386","line":2,"column":15,"nodeType":"331","messageId":"332","endLine":2,"endColumn":18},{"ruleId":"329","severity":1,"message":"338","line":2,"column":20,"nodeType":"331","messageId":"332","endLine":2,"endColumn":26},{"ruleId":"329","severity":1,"message":"425","line":2,"column":29,"nodeType":"331","messageId":"332","endLine":2,"endColumn":36},{"ruleId":"329","severity":1,"message":"426","line":93,"column":9,"nodeType":"331","messageId":"332","endLine":93,"endColumn":18},{"ruleId":"329","severity":1,"message":"427","line":104,"column":7,"nodeType":"331","messageId":"332","endLine":104,"endColumn":19},{"ruleId":"391","severity":1,"message":"398","line":236,"column":27,"nodeType":"389","messageId":"393","endLine":236,"endColumn":29},{"ruleId":"344","severity":1,"message":"345","line":345,"column":46,"nodeType":"346","messageId":"347","endLine":345,"endColumn":48},{"ruleId":"373","severity":1,"message":"374","line":1,"column":1,"nodeType":"375","endLine":8,"endColumn":2},{"ruleId":"373","severity":1,"message":"374","line":1,"column":1,"nodeType":"375","endLine":8,"endColumn":2},{"ruleId":"373","severity":1,"message":"374","line":1,"column":1,"nodeType":"375","endLine":8,"endColumn":2},{"ruleId":"355","severity":1,"message":"356","line":14,"column":6,"nodeType":"357","endLine":14,"endColumn":8,"suggestions":"428"},{"ruleId":"414","severity":1,"message":"415","line":52,"column":13,"nodeType":"416","endLine":52,"endColumn":20},{"ruleId":"355","severity":1,"message":"356","line":15,"column":6,"nodeType":"357","endLine":15,"endColumn":8,"suggestions":"429"},{"ruleId":"414","severity":1,"message":"415","line":56,"column":13,"nodeType":"416","endLine":56,"endColumn":20},{"ruleId":"355","severity":1,"message":"356","line":11,"column":6,"nodeType":"357","endLine":11,"endColumn":8,"suggestions":"430"},{"ruleId":"414","severity":1,"message":"415","line":66,"column":13,"nodeType":"416","endLine":66,"endColumn":20},{"ruleId":"373","severity":1,"message":"374","line":1,"column":1,"nodeType":"375","endLine":8,"endColumn":2},"no-unused-vars","'positions' is defined but never used.","Identifier","unusedVar","'types' is defined but never used.","no-native-reassign",["431"],"no-negated-in-lhs",["432"],"'Button' is defined but never used.","'isAdmin' is assigned a value but never used.","'loggedIn' is assigned a value but never used.","'setLoggedIn' is assigned a value but never used.","'setIsMain' is assigned a value but never used.","'GiConsoleController' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'AiIcons' is defined but never used.","'Home' is defined but never used.","'SignIn' is defined but never used.","'DashRoutes' is defined but never used.","'getRouteTable' is defined but never used.","'totalTOTAL' is assigned a value but never used.","'setTotalTOTAL' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["433"],"React Hook useEffect has a missing dependency: 'todayQuantityPerProcess'. Either include it or remove the dependency array.",["434"],"'useEffect' is defined but never used.","'Container' is defined but never used.","React Hook useEffect has a missing dependency: 'ISRItem'. Either include it or remove the dependency array. You can also do a functional update 'setISRItem(I => ...)' if you only need 'ISRItem' in the 'setISRItem' call.",["435"],"'handlePrint' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'detailStyle'. Either include it or remove the dependency array. You can also do a functional update 'setdetailStyle(d => ...)' if you only need 'detailStyle' in the 'setdetailStyle' call.",["436"],["437"],"'useBarcode' is defined but never used.",["438"],"React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array.",["439"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["440"],"'Table' is defined but never used.","'Form' is defined but never used.","'Card' is defined but never used.","'ButtonGroup' is defined but never used.",["441"],"React Hook useEffect has a missing dependency: 'details'. Either include it or remove the dependency array.",["442"],"'Image' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'Moment' is defined but never used.","React Hook useEffect has missing dependencies: 'dummyState' and 'setDummyState'. Either include them or remove the dependency array. If 'setDummyState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["443"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'setCached'. Either include it or remove the dependency array. If 'setCached' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["444"],"'Modal' is defined but never used.","'FaIcons' is defined but never used.","'handleClose' is assigned a value but never used.","'searchInput' is assigned a value but never used.","'setSearchInput' is assigned a value but never used.","'searchResult' is assigned a value but never used.","'setSearchResult' is assigned a value but never used.",["445"],"'handleFormChange' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleEdit' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'selectedItems'. Either include it or remove the dependency array.",["446"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["447"],"React Hook useEffect has a missing dependency: 'isMain'. Either include it or remove the dependency array.",["448"],"React Hook useEffect has a missing dependency: 'detailToUpdate'. Either include it or remove the dependency array. You can also do a functional update 'setdetailToUpdate(d => ...)' if you only need 'detailToUpdate' in the 'setdetailToUpdate' call.",["449"],["450"],"React Hook useEffect has missing dependencies: 'handleDelete' and 'handleEdit'. Either include them or remove the dependency array.",["451"],"'NavLink' is defined but never used.","'dataDough' is assigned a value but never used.","'optionsDough' is assigned a value but never used.",["452"],["453"],["454"],"no-global-assign","no-unsafe-negation",{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"455","fix":"463"},{"desc":"455","fix":"464"},{"desc":"465","fix":"466"},{"desc":"455","fix":"467"},{"desc":"468","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"455","fix":"476"},{"desc":"477","fix":"478"},{"desc":"455","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"455","fix":"484"},{"desc":"485","fix":"486"},{"desc":"455","fix":"487"},{"desc":"455","fix":"488"},{"desc":"455","fix":"489"},"Update the dependencies array to be: [dispatch]",{"range":"490","text":"491"},"Update the dependencies array to be: [statusTable, todayQuantityPerProcess]",{"range":"492","text":"493"},"Update the dependencies array to be: [ISRItem, ISRItem.detail_customer]",{"range":"494","text":"495"},"Update the dependencies array to be: [detailStyle, item]",{"range":"496","text":"497"},{"range":"498","text":"491"},{"range":"499","text":"491"},"Update the dependencies array to be: [ISRItem, item]",{"range":"500","text":"501"},{"range":"502","text":"491"},"Update the dependencies array to be: [dispatch, dummyState]",{"range":"503","text":"504"},"Update the dependencies array to be: [details, searchInput]",{"range":"505","text":"506"},"Update the dependencies array to be: [dummyState, setDummyState]",{"range":"507","text":"508"},"Update the dependencies array to be: [auth, setCached]",{"range":"509","text":"510"},{"range":"511","text":"491"},"Update the dependencies array to be: [selectedItems, show]",{"range":"512","text":"513"},{"range":"514","text":"491"},"Update the dependencies array to be: [barcodeScanResult, isMain]",{"range":"515","text":"516"},"Update the dependencies array to be: [detailToUpdate, selectedDetail]",{"range":"517","text":"518"},{"range":"519","text":"491"},"Update the dependencies array to be: [details, handleDelete, handleEdit]",{"range":"520","text":"521"},{"range":"522","text":"491"},{"range":"523","text":"491"},{"range":"524","text":"491"},[1812,1814],"[dispatch]",[3499,3512],"[statusTable, todayQuantityPerProcess]",[1399,1424],"[ISRItem, ISRItem.detail_customer]",[1035,1041],"[detailStyle, item]",[1098,1100],[961,963],[1889,1898],"[ISRItem, item]",[873,875],[968,980],"[dispatch, dummyState]",[1818,1831],"[details, searchInput]",[2787,2789],"[dummyState, setDummyState]",[1271,1277],"[auth, setCached]",[1750,1752],[4804,4810],"[selectedItems, show]",[657,659],[2602,2621],"[barcodeScanResult, isMain]",[3761,3777],"[detailToUpdate, selectedDetail]",[4932,4934],[6981,6990],"[details, handleDelete, handleEdit]",[494,496],[495,497],[462,464]]